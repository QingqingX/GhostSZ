// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gZip_cu_bitPacking (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        outStream_V_V_din,
        outStream_V_V_full_n,
        outStream_V_V_write,
        inStream_V_V_dout,
        inStream_V_V_empty_n,
        inStream_V_V_read,
        inStreamSize_V_dout,
        inStreamSize_V_empty_n,
        inStreamSize_V_read,
        prevSize,
        bufferOut_V_read,
        bitIdx_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_pp0_stage0 = 7'd8;
parameter    ap_ST_fsm_state7 = 7'd16;
parameter    ap_ST_fsm_state8 = 7'd32;
parameter    ap_ST_fsm_state9 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] outStream_V_V_din;
input   outStream_V_V_full_n;
output   outStream_V_V_write;
input  [63:0] inStream_V_V_dout;
input   inStream_V_V_empty_n;
output   inStream_V_V_read;
input  [15:0] inStreamSize_V_dout;
input   inStreamSize_V_empty_n;
output   inStreamSize_V_read;
input  [31:0] prevSize;
input  [127:0] bufferOut_V_read;
input  [31:0] bitIdx_read;
output  [31:0] ap_return_0;
output  [127:0] ap_return_1;
output  [31:0] ap_return_2;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] outStream_V_V_din;
reg outStream_V_V_write;
reg inStream_V_V_read;
reg inStreamSize_V_read;
reg[31:0] ap_return_0;
reg[127:0] ap_return_1;
reg[31:0] ap_return_2;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    outStream_V_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_120_fu_405_p2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_121_reg_798;
reg   [0:0] tmp_121_reg_798_pp0_iter1_reg;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_fu_667_p2;
reg    inStream_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_125_fu_490_p2;
reg    inStreamSize_V_blk_n;
wire   [0:0] tmp_fu_235_p2;
reg   [127:0] p_Val2_s_reg_175;
reg   [25:0] i_reg_185;
reg    ap_block_state1;
wire   [31:0] size_fu_241_p1;
reg   [0:0] tmp_1143_reg_747;
wire    ap_CS_fsm_state2;
reg   [25:0] tmp_114_reg_753;
wire   [5:0] tmp_1144_fu_263_p1;
reg   [5:0] tmp_1144_reg_758;
reg   [0:0] tmp_1147_reg_763;
reg   [25:0] tmp_115_reg_768;
reg   [25:0] tmp_117_reg_773;
wire   [26:0] sizeInOutV_fu_335_p3;
reg   [26:0] sizeInOutV_reg_778;
reg    ap_block_state3;
wire   [31:0] leftOverBit_fu_367_p3;
reg   [31:0] leftOverBit_reg_783;
wire   [6:0] tmp_1146_fu_374_p1;
reg   [6:0] tmp_1146_reg_788;
wire   [0:0] tmp_121_fu_420_p2;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [25:0] i_s_fu_425_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] tmp_V_130_fu_472_p1;
reg   [63:0] tmp_V_130_reg_807;
wire   [127:0] tmp_124_fu_486_p1;
reg   [127:0] tmp_124_reg_812;
reg   [63:0] tmp_V_134_reg_820;
reg    ap_block_state7;
wire   [0:0] tmp_1161_fu_509_p2;
reg   [0:0] tmp_1161_reg_825;
wire   [7:0] tmp_1163_fu_514_p1;
reg   [7:0] tmp_1163_reg_833;
wire   [127:0] p_Result_s_fu_647_p2;
wire    ap_CS_fsm_state8;
wire   [31:0] tmp_126_fu_653_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg   [31:0] size3_reg_165;
reg   [127:0] ap_phi_mux_p_Val2_s_phi_fu_178_p4;
reg   [127:0] p_Val2_68_reg_196;
reg   [31:0] bitIdx_reg_206;
wire   [127:0] tmp_128_fu_688_p1;
reg   [127:0] ap_phi_mux_bufferOut_V_2_phi_fu_218_p4;
reg    ap_block_state9;
wire   [31:0] tmp_129_fu_693_p2;
reg   [31:0] ap_phi_mux_bitIdx_1_phi_fu_228_p4;
wire  signed [63:0] tmp_V_83_fu_411_p1;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] tmp_V_133_fu_673_p1;
wire   [31:0] tmp_s_fu_267_p2;
wire   [31:0] p_neg_fu_280_p2;
wire   [31:0] p_neg6_fu_306_p2;
wire   [25:0] tmp_113_fu_312_p4;
wire   [26:0] p_lshr7_cast_fu_322_p1;
wire   [26:0] p_neg_t8_fu_326_p2;
wire   [26:0] p_lshr_f9_cast_fu_332_p1;
wire   [5:0] tmp_1145_fu_349_p1;
wire   [31:0] p_and_t_fu_353_p3;
wire   [31:0] p_neg_t_fu_361_p2;
wire   [31:0] p_and_f_fu_342_p3;
wire   [26:0] tmp_205_cast_fu_378_p1;
wire   [26:0] tmp_116_fu_381_p2;
wire   [26:0] tmp_207_cast_fu_387_p1;
wire   [26:0] tmp_118_fu_390_p3;
wire   [29:0] tmp_119_fu_397_p3;
wire   [26:0] i_cast_fu_416_p1;
wire   [6:0] tmp_1148_fu_431_p1;
wire   [127:0] tmp_1149_fu_434_p1;
wire   [127:0] tmp_1150_fu_438_p2;
wire   [127:0] tmp_1151_fu_444_p2;
wire   [127:0] tmp_1153_fu_456_p1;
wire   [127:0] tmp_1152_fu_450_p2;
wire   [127:0] tmp_1154_fu_460_p2;
wire   [127:0] p_Result_34_fu_466_p2;
wire   [63:0] tmp_123_fu_476_p4;
wire   [6:0] Hi_assign_s_fu_495_p2;
wire  signed [31:0] Hi_assign_37_cast_fu_500_p1;
wire   [31:0] Hi_assign_12_fu_504_p2;
wire   [6:0] tmp_1157_fu_518_p2;
wire   [63:0] tmp_1158_fu_523_p1;
wire   [63:0] tmp_1159_fu_527_p2;
wire   [63:0] p_Result_35_fu_533_p2;
wire   [7:0] tmp_1162_fu_542_p1;
wire   [7:0] tmp_1164_fu_545_p2;
wire   [7:0] tmp_1165_fu_551_p3;
wire   [7:0] tmp_1167_fu_563_p3;
wire   [7:0] tmp_1166_fu_557_p3;
wire   [7:0] tmp_1168_fu_570_p2;
wire   [127:0] tmp_V_135_fu_538_p1;
wire   [127:0] tmp_1169_fu_576_p1;
wire   [127:0] tmp_1172_fu_588_p2;
reg   [127:0] tmp_1173_fu_594_p4;
wire   [127:0] tmp_1170_fu_580_p1;
wire   [127:0] tmp_1171_fu_584_p1;
wire   [127:0] tmp_1175_fu_611_p2;
wire   [127:0] tmp_1176_fu_617_p2;
wire   [127:0] p_demorgan_fu_623_p2;
wire   [127:0] tmp_1177_fu_629_p2;
wire   [127:0] tmp_1174_fu_604_p3;
wire   [127:0] tmp_1178_fu_635_p2;
wire   [127:0] tmp_1179_fu_641_p2;
wire   [25:0] tmp_1181_fu_657_p4;
wire   [63:0] tmp_127_fu_678_p4;
reg   [31:0] ap_return_0_preg;
reg   [127:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [6:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_116;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 128'd0;
#0 ap_return_2_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((tmp_120_fu_405_p2 == 1'd0) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((tmp_120_fu_405_p2 == 1'd0) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((~((icmp_fu_667_p2 == 1'd1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_return_0_preg <= size3_reg_165;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 128'd0;
    end else begin
        if ((~((icmp_fu_667_p2 == 1'd1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_return_1_preg <= ap_phi_mux_bufferOut_V_2_phi_fu_218_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((~((icmp_fu_667_p2 == 1'd1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_return_2_preg <= ap_phi_mux_bitIdx_1_phi_fu_228_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        bitIdx_reg_206 <= tmp_126_fu_653_p2;
    end else if ((~((tmp_125_fu_490_p2 == 1'd0) & (inStream_V_V_empty_n == 1'b0)) & (tmp_125_fu_490_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        bitIdx_reg_206 <= bitIdx_read;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_121_fu_420_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_185 <= i_s_fu_425_p2;
    end else if ((~((tmp_120_fu_405_p2 == 1'd0) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_185 <= 26'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_68_reg_196 <= p_Result_s_fu_647_p2;
    end else if ((~((tmp_125_fu_490_p2 == 1'd0) & (inStream_V_V_empty_n == 1'b0)) & (tmp_125_fu_490_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        p_Val2_68_reg_196 <= p_Val2_s_reg_175;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_121_reg_798_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_s_reg_175 <= tmp_124_reg_812;
    end else if ((~((tmp_120_fu_405_p2 == 1'd0) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        p_Val2_s_reg_175 <= bufferOut_V_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_116)) begin
        if ((tmp_fu_235_p2 == 1'd1)) begin
            size3_reg_165 <= prevSize;
        end else if ((tmp_fu_235_p2 == 1'd0)) begin
            size3_reg_165 <= size_fu_241_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((tmp_120_fu_405_p2 == 1'd0) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        leftOverBit_reg_783 <= leftOverBit_fu_367_p3;
        sizeInOutV_reg_778 <= sizeInOutV_fu_335_p3;
        tmp_1146_reg_788 <= tmp_1146_fu_374_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_1143_reg_747 <= size3_reg_165[32'd31];
        tmp_1144_reg_758 <= tmp_1144_fu_263_p1;
        tmp_1147_reg_763 <= tmp_s_fu_267_p2[32'd31];
        tmp_114_reg_753 <= {{size3_reg_165[31:6]}};
        tmp_115_reg_768 <= {{p_neg_fu_280_p2[31:6]}};
        tmp_117_reg_773 <= {{tmp_s_fu_267_p2[31:6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((tmp_125_fu_490_p2 == 1'd0) & (inStream_V_V_empty_n == 1'b0)) & (tmp_125_fu_490_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_1161_reg_825 <= tmp_1161_fu_509_p2;
        tmp_1163_reg_833 <= tmp_1163_fu_514_p1;
        tmp_V_134_reg_820 <= inStream_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_121_reg_798 <= tmp_121_fu_420_p2;
        tmp_121_reg_798_pp0_iter1_reg <= tmp_121_reg_798;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_121_reg_798 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_124_reg_812[63 : 0] <= tmp_124_fu_486_p1[63 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_121_reg_798 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_130_reg_807 <= tmp_V_130_fu_472_p1;
    end
end

always @ (*) begin
    if ((tmp_121_fu_420_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_fu_667_p2 == 1'd1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        if ((icmp_fu_667_p2 == 1'd0)) begin
            ap_phi_mux_bitIdx_1_phi_fu_228_p4 = bitIdx_reg_206;
        end else if ((icmp_fu_667_p2 == 1'd1)) begin
            ap_phi_mux_bitIdx_1_phi_fu_228_p4 = tmp_129_fu_693_p2;
        end else begin
            ap_phi_mux_bitIdx_1_phi_fu_228_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_bitIdx_1_phi_fu_228_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        if ((icmp_fu_667_p2 == 1'd0)) begin
            ap_phi_mux_bufferOut_V_2_phi_fu_218_p4 = p_Val2_68_reg_196;
        end else if ((icmp_fu_667_p2 == 1'd1)) begin
            ap_phi_mux_bufferOut_V_2_phi_fu_218_p4 = tmp_128_fu_688_p1;
        end else begin
            ap_phi_mux_bufferOut_V_2_phi_fu_218_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_bufferOut_V_2_phi_fu_218_p4 = 'bx;
    end
end

always @ (*) begin
    if (((tmp_121_reg_798_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_p_Val2_s_phi_fu_178_p4 = tmp_124_reg_812;
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_178_p4 = p_Val2_s_reg_175;
    end
end

always @ (*) begin
    if ((~((icmp_fu_667_p2 == 1'd1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_fu_667_p2 == 1'd1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_return_0 = size3_reg_165;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((icmp_fu_667_p2 == 1'd1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_return_1 = ap_phi_mux_bufferOut_V_2_phi_fu_218_p4;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((icmp_fu_667_p2 == 1'd1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_return_2 = ap_phi_mux_bitIdx_1_phi_fu_228_p4;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((tmp_fu_235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        inStreamSize_V_blk_n = inStreamSize_V_empty_n;
    end else begin
        inStreamSize_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | ((tmp_fu_235_p2 == 1'd0) & (inStreamSize_V_empty_n == 1'b0))) & (tmp_fu_235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        inStreamSize_V_read = 1'b1;
    end else begin
        inStreamSize_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_125_fu_490_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_121_reg_798 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        inStream_V_V_blk_n = inStream_V_V_empty_n;
    end else begin
        inStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((tmp_125_fu_490_p2 == 1'd0) & (inStream_V_V_empty_n == 1'b0)) & (tmp_125_fu_490_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_121_reg_798 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        inStream_V_V_read = 1'b1;
    end else begin
        inStream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_fu_667_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((tmp_121_reg_798_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_120_fu_405_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        outStream_V_V_blk_n = outStream_V_V_full_n;
    end else begin
        outStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_fu_667_p2 == 1'd1) & (outStream_V_V_full_n == 1'b0)) & (icmp_fu_667_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        outStream_V_V_din = tmp_V_133_fu_673_p1;
    end else if (((tmp_121_reg_798_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outStream_V_V_din = tmp_V_130_reg_807;
    end else if ((~((tmp_120_fu_405_p2 == 1'd0) & (outStream_V_V_full_n == 1'b0)) & (tmp_120_fu_405_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        outStream_V_V_din = tmp_V_83_fu_411_p1;
    end else begin
        outStream_V_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((icmp_fu_667_p2 == 1'd1) & (outStream_V_V_full_n == 1'b0)) & (icmp_fu_667_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((tmp_121_reg_798_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((tmp_120_fu_405_p2 == 1'd0) & (outStream_V_V_full_n == 1'b0)) & (tmp_120_fu_405_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        outStream_V_V_write = 1'b1;
    end else begin
        outStream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | ((tmp_fu_235_p2 == 1'd0) & (inStreamSize_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((tmp_120_fu_405_p2 == 1'd0) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_121_fu_420_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_121_fu_420_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((tmp_125_fu_490_p2 == 1'd0) & (inStream_V_V_empty_n == 1'b0)) & (tmp_125_fu_490_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if ((~((tmp_125_fu_490_p2 == 1'd0) & (inStream_V_V_empty_n == 1'b0)) & (tmp_125_fu_490_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if ((~((icmp_fu_667_p2 == 1'd1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_assign_12_fu_504_p2 = ($signed(bitIdx_read) + $signed(Hi_assign_37_cast_fu_500_p1));

assign Hi_assign_37_cast_fu_500_p1 = $signed(Hi_assign_s_fu_495_p2);

assign Hi_assign_s_fu_495_p2 = ($signed(7'd127) + $signed(tmp_1146_reg_788));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_121_reg_798 == 1'd1) & (inStream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_121_reg_798_pp0_iter1_reg == 1'd1) & (outStream_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_121_reg_798 == 1'd1) & (inStream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_121_reg_798_pp0_iter1_reg == 1'd1) & (outStream_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_121_reg_798 == 1'd1) & (inStream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_121_reg_798_pp0_iter1_reg == 1'd1) & (outStream_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | ((tmp_fu_235_p2 == 1'd0) & (inStreamSize_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state3 = ((tmp_120_fu_405_p2 == 1'd0) & (outStream_V_V_full_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((tmp_121_reg_798 == 1'd1) & (inStream_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter2 = ((tmp_121_reg_798_pp0_iter1_reg == 1'd1) & (outStream_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((tmp_125_fu_490_p2 == 1'd0) & (inStream_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state9 = ((icmp_fu_667_p2 == 1'd1) & (outStream_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_116 = (~((ap_start == 1'b0) | ((tmp_fu_235_p2 == 1'd0) & (inStreamSize_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = (outStream_V_V_blk_n & inStream_V_V_blk_n & inStreamSize_V_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign i_cast_fu_416_p1 = i_reg_185;

assign i_s_fu_425_p2 = (i_reg_185 + 26'd1);

assign icmp_fu_667_p2 = (($signed(tmp_1181_fu_657_p4) > $signed(26'd0)) ? 1'b1 : 1'b0);

assign leftOverBit_fu_367_p3 = ((tmp_1143_reg_747[0:0] === 1'b1) ? p_neg_t_fu_361_p2 : p_and_f_fu_342_p3);

assign p_Result_34_fu_466_p2 = (tmp_1154_fu_460_p2 | tmp_1152_fu_450_p2);

assign p_Result_35_fu_533_p2 = (tmp_V_134_reg_820 & tmp_1159_fu_527_p2);

assign p_Result_s_fu_647_p2 = (tmp_1179_fu_641_p2 | tmp_1178_fu_635_p2);

assign p_and_f_fu_342_p3 = {{26'd0}, {tmp_1144_reg_758}};

assign p_and_t_fu_353_p3 = {{26'd0}, {tmp_1145_fu_349_p1}};

assign p_demorgan_fu_623_p2 = (tmp_1176_fu_617_p2 & tmp_1175_fu_611_p2);

assign p_lshr7_cast_fu_322_p1 = tmp_113_fu_312_p4;

assign p_lshr_f9_cast_fu_332_p1 = tmp_114_reg_753;

assign p_neg6_fu_306_p2 = (32'd0 - size3_reg_165);

assign p_neg_fu_280_p2 = (32'd0 - tmp_s_fu_267_p2);

assign p_neg_t8_fu_326_p2 = (27'd0 - p_lshr7_cast_fu_322_p1);

assign p_neg_t_fu_361_p2 = (32'd0 - p_and_t_fu_353_p3);

assign sizeInOutV_fu_335_p3 = ((tmp_1143_reg_747[0:0] === 1'b1) ? p_neg_t8_fu_326_p2 : p_lshr_f9_cast_fu_332_p1);

assign size_fu_241_p1 = inStreamSize_V_dout;

assign tmp_113_fu_312_p4 = {{p_neg6_fu_306_p2[31:6]}};

assign tmp_1144_fu_263_p1 = size3_reg_165[5:0];

assign tmp_1145_fu_349_p1 = p_neg6_fu_306_p2[5:0];

assign tmp_1146_fu_374_p1 = leftOverBit_fu_367_p3[6:0];

assign tmp_1148_fu_431_p1 = bitIdx_read[6:0];

assign tmp_1149_fu_434_p1 = tmp_1148_fu_431_p1;

assign tmp_1150_fu_438_p2 = 128'd18446744073709551615 << tmp_1149_fu_434_p1;

assign tmp_1151_fu_444_p2 = (tmp_1150_fu_438_p2 ^ 128'd340282366920938463463374607431768211455);

assign tmp_1152_fu_450_p2 = (tmp_1151_fu_444_p2 & ap_phi_mux_p_Val2_s_phi_fu_178_p4);

assign tmp_1153_fu_456_p1 = inStream_V_V_dout;

assign tmp_1154_fu_460_p2 = tmp_1153_fu_456_p1 << tmp_1149_fu_434_p1;

assign tmp_1157_fu_518_p2 = ($signed(7'd64) - $signed(tmp_1146_reg_788));

assign tmp_1158_fu_523_p1 = tmp_1157_fu_518_p2;

assign tmp_1159_fu_527_p2 = 64'd18446744073709551615 >> tmp_1158_fu_523_p1;

assign tmp_1161_fu_509_p2 = ((bitIdx_read > Hi_assign_12_fu_504_p2) ? 1'b1 : 1'b0);

assign tmp_1162_fu_542_p1 = bitIdx_read[7:0];

assign tmp_1163_fu_514_p1 = Hi_assign_12_fu_504_p2[7:0];

assign tmp_1164_fu_545_p2 = (8'd127 - tmp_1162_fu_542_p1);

assign tmp_1165_fu_551_p3 = ((tmp_1161_reg_825[0:0] === 1'b1) ? tmp_1162_fu_542_p1 : tmp_1163_reg_833);

assign tmp_1166_fu_557_p3 = ((tmp_1161_reg_825[0:0] === 1'b1) ? tmp_1163_reg_833 : tmp_1162_fu_542_p1);

assign tmp_1167_fu_563_p3 = ((tmp_1161_reg_825[0:0] === 1'b1) ? tmp_1164_fu_545_p2 : tmp_1162_fu_542_p1);

assign tmp_1168_fu_570_p2 = (8'd127 - tmp_1165_fu_551_p3);

assign tmp_1169_fu_576_p1 = tmp_1167_fu_563_p3;

assign tmp_116_fu_381_p2 = (27'd0 - tmp_205_cast_fu_378_p1);

assign tmp_1170_fu_580_p1 = tmp_1166_fu_557_p3;

assign tmp_1171_fu_584_p1 = tmp_1168_fu_570_p2;

assign tmp_1172_fu_588_p2 = tmp_V_135_fu_538_p1 << tmp_1169_fu_576_p1;

integer ap_tvar_int_0;

always @ (tmp_1172_fu_588_p2) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 127 - 0) begin
            tmp_1173_fu_594_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_1173_fu_594_p4[ap_tvar_int_0] = tmp_1172_fu_588_p2[127 - ap_tvar_int_0];
        end
    end
end

assign tmp_1174_fu_604_p3 = ((tmp_1161_reg_825[0:0] === 1'b1) ? tmp_1173_fu_594_p4 : tmp_1172_fu_588_p2);

assign tmp_1175_fu_611_p2 = 128'd340282366920938463463374607431768211455 << tmp_1170_fu_580_p1;

assign tmp_1176_fu_617_p2 = 128'd340282366920938463463374607431768211455 >> tmp_1171_fu_584_p1;

assign tmp_1177_fu_629_p2 = (p_demorgan_fu_623_p2 ^ 128'd340282366920938463463374607431768211455);

assign tmp_1178_fu_635_p2 = (tmp_1177_fu_629_p2 & p_Val2_s_reg_175);

assign tmp_1179_fu_641_p2 = (tmp_1174_fu_604_p3 & p_demorgan_fu_623_p2);

assign tmp_1181_fu_657_p4 = {{bitIdx_reg_206[31:6]}};

assign tmp_118_fu_390_p3 = ((tmp_1147_reg_763[0:0] === 1'b1) ? tmp_116_fu_381_p2 : tmp_207_cast_fu_387_p1);

assign tmp_119_fu_397_p3 = {{tmp_118_fu_390_p3}, {3'd0}};

assign tmp_120_fu_405_p2 = ((tmp_118_fu_390_p3 == 27'd0) ? 1'b1 : 1'b0);

assign tmp_121_fu_420_p2 = (($signed(i_cast_fu_416_p1) < $signed(sizeInOutV_reg_778)) ? 1'b1 : 1'b0);

assign tmp_123_fu_476_p4 = {{p_Result_34_fu_466_p2[127:64]}};

assign tmp_124_fu_486_p1 = tmp_123_fu_476_p4;

assign tmp_125_fu_490_p2 = ((tmp_1146_reg_788 == 7'd0) ? 1'b1 : 1'b0);

assign tmp_126_fu_653_p2 = (bitIdx_read + leftOverBit_reg_783);

assign tmp_127_fu_678_p4 = {{p_Val2_68_reg_196[127:64]}};

assign tmp_128_fu_688_p1 = tmp_127_fu_678_p4;

assign tmp_129_fu_693_p2 = ($signed(32'd4294967232) + $signed(bitIdx_reg_206));

assign tmp_205_cast_fu_378_p1 = tmp_115_reg_768;

assign tmp_207_cast_fu_387_p1 = tmp_117_reg_773;

assign tmp_V_130_fu_472_p1 = p_Result_34_fu_466_p2[63:0];

assign tmp_V_133_fu_673_p1 = p_Val2_68_reg_196[63:0];

assign tmp_V_135_fu_538_p1 = p_Result_35_fu_533_p2;

assign tmp_V_83_fu_411_p1 = $signed(tmp_119_fu_397_p3);

assign tmp_fu_235_p2 = ((prevSize == 32'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_267_p2 = (bitIdx_read + size3_reg_165);

always @ (posedge ap_clk) begin
    tmp_124_reg_812[127:64] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //gZip_cu_bitPacking
