// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gZip_cu_merger (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        outStream_V_V_din,
        outStream_V_V_full_n,
        outStream_V_V_write,
        inStream0_V_V_dout,
        inStream0_V_V_empty_n,
        inStream0_V_V_read,
        inStreamSizeInBits0_V_dout,
        inStreamSizeInBits0_V_empty_n,
        inStreamSizeInBits0_V_read,
        inStream1_V_V_dout,
        inStream1_V_V_empty_n,
        inStream1_V_V_read,
        inStreamSizeInBits1_V_dout,
        inStreamSizeInBits1_V_empty_n,
        inStreamSizeInBits1_V_read,
        inStream2_V_V_dout,
        inStream2_V_V_empty_n,
        inStream2_V_V_read,
        inStreamSizeInBits2_V_dout,
        inStreamSizeInBits2_V_empty_n,
        inStreamSizeInBits2_V_read,
        inStream3_V_V_dout,
        inStream3_V_V_empty_n,
        inStream3_V_V_read,
        inStreamSizeInBits3_V_dout,
        inStreamSizeInBits3_V_empty_n,
        inStreamSizeInBits3_V_read,
        inStream4_V_V_dout,
        inStream4_V_V_empty_n,
        inStream4_V_V_read,
        inStreamSizeInBits4_V_dout,
        inStreamSizeInBits4_V_empty_n,
        inStreamSizeInBits4_V_read,
        inStream5_V_V_dout,
        inStream5_V_V_empty_n,
        inStream5_V_V_read,
        inStreamSizeInBits5_V_dout,
        inStreamSizeInBits5_V_empty_n,
        inStreamSizeInBits5_V_read,
        inStream6_V_V_dout,
        inStream6_V_V_empty_n,
        inStream6_V_V_read,
        inStreamSizeInBits6_V_dout,
        inStreamSizeInBits6_V_empty_n,
        inStreamSizeInBits6_V_read,
        inStream7_V_V_dout,
        inStream7_V_V_empty_n,
        inStream7_V_V_read,
        inStreamSizeInBits7_V_dout,
        inStreamSizeInBits7_V_empty_n,
        inStreamSizeInBits7_V_read,
        input_size_dout,
        input_size_empty_n,
        input_size_read,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_state9 = 26'd256;
parameter    ap_ST_fsm_state10 = 26'd512;
parameter    ap_ST_fsm_state11 = 26'd1024;
parameter    ap_ST_fsm_state12 = 26'd2048;
parameter    ap_ST_fsm_state13 = 26'd4096;
parameter    ap_ST_fsm_state14 = 26'd8192;
parameter    ap_ST_fsm_state15 = 26'd16384;
parameter    ap_ST_fsm_state16 = 26'd32768;
parameter    ap_ST_fsm_state17 = 26'd65536;
parameter    ap_ST_fsm_state18 = 26'd131072;
parameter    ap_ST_fsm_state19 = 26'd262144;
parameter    ap_ST_fsm_state20 = 26'd524288;
parameter    ap_ST_fsm_state21 = 26'd1048576;
parameter    ap_ST_fsm_state22 = 26'd2097152;
parameter    ap_ST_fsm_state23 = 26'd4194304;
parameter    ap_ST_fsm_state24 = 26'd8388608;
parameter    ap_ST_fsm_state25 = 26'd16777216;
parameter    ap_ST_fsm_state26 = 26'd33554432;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [63:0] outStream_V_V_din;
input   outStream_V_V_full_n;
output   outStream_V_V_write;
input  [63:0] inStream0_V_V_dout;
input   inStream0_V_V_empty_n;
output   inStream0_V_V_read;
input  [15:0] inStreamSizeInBits0_V_dout;
input   inStreamSizeInBits0_V_empty_n;
output   inStreamSizeInBits0_V_read;
input  [63:0] inStream1_V_V_dout;
input   inStream1_V_V_empty_n;
output   inStream1_V_V_read;
input  [15:0] inStreamSizeInBits1_V_dout;
input   inStreamSizeInBits1_V_empty_n;
output   inStreamSizeInBits1_V_read;
input  [63:0] inStream2_V_V_dout;
input   inStream2_V_V_empty_n;
output   inStream2_V_V_read;
input  [15:0] inStreamSizeInBits2_V_dout;
input   inStreamSizeInBits2_V_empty_n;
output   inStreamSizeInBits2_V_read;
input  [63:0] inStream3_V_V_dout;
input   inStream3_V_V_empty_n;
output   inStream3_V_V_read;
input  [15:0] inStreamSizeInBits3_V_dout;
input   inStreamSizeInBits3_V_empty_n;
output   inStreamSizeInBits3_V_read;
input  [63:0] inStream4_V_V_dout;
input   inStream4_V_V_empty_n;
output   inStream4_V_V_read;
input  [15:0] inStreamSizeInBits4_V_dout;
input   inStreamSizeInBits4_V_empty_n;
output   inStreamSizeInBits4_V_read;
input  [63:0] inStream5_V_V_dout;
input   inStream5_V_V_empty_n;
output   inStream5_V_V_read;
input  [15:0] inStreamSizeInBits5_V_dout;
input   inStreamSizeInBits5_V_empty_n;
output   inStreamSizeInBits5_V_read;
input  [63:0] inStream6_V_V_dout;
input   inStream6_V_V_empty_n;
output   inStream6_V_V_read;
input  [15:0] inStreamSizeInBits6_V_dout;
input   inStreamSizeInBits6_V_empty_n;
output   inStreamSizeInBits6_V_read;
input  [63:0] inStream7_V_V_dout;
input   inStream7_V_V_empty_n;
output   inStream7_V_V_read;
input  [15:0] inStreamSizeInBits7_V_dout;
input   inStreamSizeInBits7_V_empty_n;
output   inStreamSizeInBits7_V_read;
input  [63:0] input_size_dout;
input   input_size_empty_n;
output   input_size_read;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] outStream_V_V_din;
reg outStream_V_V_write;
reg inStream0_V_V_read;
reg inStreamSizeInBits0_V_read;
reg inStream1_V_V_read;
reg inStreamSizeInBits1_V_read;
reg inStream2_V_V_read;
reg inStreamSizeInBits2_V_read;
reg inStream3_V_V_read;
reg inStreamSizeInBits3_V_read;
reg inStream4_V_V_read;
reg inStreamSizeInBits4_V_read;
reg inStream5_V_V_read;
reg inStreamSizeInBits5_V_read;
reg inStream6_V_V_read;
reg inStreamSizeInBits6_V_read;
reg inStream7_V_V_read;
reg inStreamSizeInBits7_V_read;
reg input_size_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    outStream_V_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_i_i_35_fu_747_p2;
wire   [0:0] tmp_10_i_i_fu_804_p2;
wire   [0:0] icmp_fu_872_p2;
wire    ap_CS_fsm_state4;
reg   [0:0] tmp_10_i_i_reg_1305;
reg   [0:0] icmp_reg_1321;
wire    ap_CS_fsm_state21;
wire   [0:0] exitcond_i_i_fu_907_p2;
reg   [0:0] tmp_70_reg_1301;
wire   [0:0] icmp1_fu_966_p2;
wire    ap_CS_fsm_state23;
reg   [0:0] icmp1_reg_1385;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire   [0:0] tmp_74_fu_1209_p2;
reg    input_size_blk_n;
wire   [31:0] sizeInBits_q0;
reg   [31:0] reg_699;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    grp_bitPacking_fu_655_ap_ready;
wire    grp_bitPacking_fu_655_ap_done;
reg   [31:0] reg_704;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state12;
reg   [127:0] reg_709;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
reg   [31:0] reg_715;
reg   [31:0] reg_721;
wire    ap_CS_fsm_state11;
wire   [31:0] tmp_56_fu_726_p1;
reg   [31:0] tmp_56_reg_1239;
reg    ap_block_state1;
wire   [3:0] i_fu_736_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_i_i_fu_730_p2;
wire   [0:0] tmp_70_fu_766_p1;
reg    ap_predicate_op97_write_state3;
reg    ap_block_state3;
wire   [127:0] p_Result_s_fu_850_p2;
reg   [127:0] p_Result_s_reg_1309;
wire   [31:0] bitIdx_1_fu_856_p2;
wire   [31:0] bitIdx_fu_878_p2;
reg   [31:0] bitIdx_reg_1325;
wire   [127:0] bufferOut_V_fu_897_p1;
reg    ap_predicate_op100_write_state4;
reg    ap_block_state4;
wire   [31:0] bitIdx_2_fu_901_p2;
reg   [31:0] tmp_16_i_i_reg_1340;
reg   [31:0] tmp_17_i_i_reg_1345;
wire   [31:0] sizeInBits_q1;
reg   [31:0] sizeInBits_load_6_reg_1350;
reg   [31:0] sizeInBits_load_7_reg_1355;
wire    ap_CS_fsm_state13;
wire   [3:0] i_3_fu_913_p2;
reg   [3:0] i_3_reg_1363;
reg    ap_predicate_op191_write_state21;
reg    ap_block_state21;
wire   [127:0] p_Result_1_fu_944_p2;
reg   [127:0] p_Result_1_reg_1373;
wire   [31:0] bitIdx_12_fu_950_p2;
wire   [31:0] overallSize_fu_972_p2;
wire    ap_CS_fsm_state22;
wire   [31:0] phitmp_i_i_fu_1003_p2;
reg    ap_predicate_op196_write_state23;
reg    ap_block_state23;
wire   [31:0] phitmp1_i_i_fu_1009_p2;
wire   [30:0] extraOutSize_fu_1088_p2;
reg   [30:0] extraOutSize_reg_1404;
wire    ap_CS_fsm_state24;
wire   [25:0] tmp_67_fu_1156_p3;
reg   [25:0] tmp_67_reg_1409;
wire   [127:0] bufferOut_V_5_i_i_fu_1192_p2;
wire   [31:0] tmp_68_fu_1202_p3;
reg   [31:0] tmp_68_reg_1419;
wire   [127:0] bufferOut_V_1_fu_1229_p1;
reg    ap_block_state26;
wire   [31:0] i_2_fu_1233_p2;
reg   [2:0] sizeInBits_address0;
reg    sizeInBits_ce0;
reg    sizeInBits_we0;
reg   [31:0] sizeInBits_d0;
reg   [2:0] sizeInBits_address1;
reg    sizeInBits_ce1;
reg    sizeInBits_we1;
reg   [31:0] sizeInBits_d1;
wire    grp_bitPacking_fu_655_ap_start;
wire    grp_bitPacking_fu_655_ap_idle;
wire   [63:0] grp_bitPacking_fu_655_outStream_V_V_din;
wire    grp_bitPacking_fu_655_outStream_V_V_write;
reg   [63:0] grp_bitPacking_fu_655_inStream_V_V_dout;
reg    grp_bitPacking_fu_655_inStream_V_V_empty_n;
wire    grp_bitPacking_fu_655_inStream_V_V_read;
reg   [15:0] grp_bitPacking_fu_655_inStreamSize_V_dout;
reg    grp_bitPacking_fu_655_inStreamSize_V_empty_n;
wire    grp_bitPacking_fu_655_inStreamSize_V_read;
reg   [31:0] grp_bitPacking_fu_655_prevSize;
reg   [127:0] grp_bitPacking_fu_655_bufferOut_V_read;
reg   [31:0] grp_bitPacking_fu_655_bitIdx_read;
wire   [31:0] grp_bitPacking_fu_655_ap_return_0;
wire   [127:0] grp_bitPacking_fu_655_ap_return_1;
wire   [31:0] grp_bitPacking_fu_655_ap_return_2;
wire    grp_bitPacking_fu_655_ap_ext_blocking_n;
wire    grp_bitPacking_fu_655_ap_str_blocking_n;
wire    grp_bitPacking_fu_655_ap_int_blocking_n;
reg   [3:0] i_i_i_reg_459;
reg   [31:0] Lo_assign_reg_470;
reg   [31:0] ap_phi_mux_bitIdx_13_i_i_phi_fu_595_p6;
reg   [127:0] ap_phi_mux_bufferOut_V_4_i_i_phi_fu_608_p6;
reg   [127:0] p_Val2_s_reg_482;
reg   [31:0] input_idx_reg_494;
reg   [31:0] itr_reg_506;
reg   [0:0] eob_flag_i_i_reg_518;
reg   [0:0] ap_phi_mux_eob_flag_1_i_i_phi_fu_623_p6;
reg   [31:0] overallSize_i_i_reg_530;
reg   [31:0] overallSize_1_i_i_reg_567;
reg   [31:0] bitIdx_3_i_i_reg_541;
reg   [127:0] bufferOut_V_2_i_i_reg_554;
reg   [3:0] i1_i_i_reg_580;
reg   [31:0] bitIdx_13_i_i_reg_591;
wire   [31:0] bitIdx_13_fu_996_p2;
reg   [127:0] bufferOut_V_4_i_i_reg_604;
wire   [127:0] bufferOut_V_13_fu_991_p1;
reg   [0:0] eob_flag_1_i_i_reg_617;
reg   [127:0] p_Val2_3_reg_635;
reg   [31:0] i2_i_i_reg_644;
reg    grp_bitPacking_fu_655_ap_start_reg;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state19;
wire   [63:0] tmp_i_i_fu_742_p1;
wire   [63:0] tmp_27_i_i_fu_919_p1;
wire   [63:0] tmp_V_19_fu_884_p1;
wire   [63:0] tmp_V_20_fu_978_p1;
wire  signed [63:0] tmp_V_fu_1198_p1;
wire   [63:0] tmp_V_18_fu_1214_p1;
wire   [0:0] tmp_71_fu_770_p1;
wire   [1:0] tmp_72_fu_774_p3;
wire   [0:0] tmp_69_fu_758_p3;
wire   [1:0] tmp_73_fu_782_p2;
wire   [1:0] tmp_2_fu_788_p3;
wire   [1:0] tmp_3_fu_796_p3;
wire   [6:0] tmp_75_fu_810_p1;
wire   [127:0] tmp_76_fu_814_p1;
wire   [127:0] tmp_77_fu_818_p2;
wire   [127:0] tmp_78_fu_824_p2;
wire   [0:0] tmp_8_i_i_fu_753_p2;
wire   [127:0] tmp_80_fu_836_p3;
wire   [127:0] tmp_79_fu_830_p2;
wire   [127:0] tmp_81_fu_844_p2;
wire   [25:0] tmp_83_fu_862_p4;
wire   [63:0] bufferOut_V_2_fu_888_p4;
wire   [6:0] tmp_86_fu_924_p1;
wire   [127:0] tmp_87_fu_928_p1;
wire   [127:0] tmp_88_fu_932_p2;
wire   [127:0] tmp_89_fu_938_p2;
wire   [25:0] tmp_91_fu_956_p4;
wire   [63:0] bufferOut_V_12_fu_982_p4;
wire   [31:0] bitIdx_10_fu_1015_p3;
wire   [31:0] tmp_12_i_i_fu_1022_p2;
wire   [31:0] p_neg_i_i_fu_1036_p2;
wire   [28:0] tmp_fu_1042_p4;
wire   [29:0] p_lshr_cast_i_i_fu_1052_p1;
wire   [28:0] tmp_s_fu_1062_p4;
wire   [0:0] tmp_62_fu_1028_p3;
wire   [29:0] p_neg_t_i_i_fu_1056_p2;
wire   [29:0] p_lshr_f_cast_i_i_fu_1072_p1;
wire   [29:0] tmp_13_i_i_fu_1076_p3;
wire  signed [30:0] tmp_13_cast_i_i_fu_1084_p1;
wire   [31:0] bitIdx_10_op_op_fu_1102_p2;
wire   [31:0] p_neg_fu_1116_p2;
wire   [25:0] p_lshr_fu_1122_p4;
wire   [0:0] tmp_64_fu_1108_p3;
wire   [25:0] p_neg_t_fu_1132_p2;
wire   [25:0] tmp_65_fu_1138_p4;
wire   [0:0] tmp_63_fu_1094_p3;
wire   [25:0] tmp_66_fu_1148_p3;
wire   [6:0] tmp_57_fu_1164_p1;
wire   [127:0] tmp_58_fu_1168_p1;
wire   [127:0] tmp_59_fu_1172_p2;
wire   [127:0] tmp_60_fu_1178_p2;
wire   [127:0] tmp_61_fu_1184_p3;
wire   [63:0] bufferOut_V_s_fu_1219_p4;
reg   [25:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
reg    ap_ext_blocking_sub_n;
reg    ap_wait_0;
reg    ap_sub_ext_blocking_0;
reg    ap_str_blocking_sub_n;
reg    ap_sub_str_blocking_0;
reg    ap_int_blocking_sub_n;
reg    ap_sub_int_blocking_0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 26'd1;
#0 grp_bitPacking_fu_655_ap_start_reg = 1'b0;
end

gZip_cu_merger_sizeInBits #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sizeInBits_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sizeInBits_address0),
    .ce0(sizeInBits_ce0),
    .we0(sizeInBits_we0),
    .d0(sizeInBits_d0),
    .q0(sizeInBits_q0),
    .address1(sizeInBits_address1),
    .ce1(sizeInBits_ce1),
    .we1(sizeInBits_we1),
    .d1(sizeInBits_d1),
    .q1(sizeInBits_q1)
);

gZip_cu_bitPacking grp_bitPacking_fu_655(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bitPacking_fu_655_ap_start),
    .ap_done(grp_bitPacking_fu_655_ap_done),
    .ap_idle(grp_bitPacking_fu_655_ap_idle),
    .ap_ready(grp_bitPacking_fu_655_ap_ready),
    .outStream_V_V_din(grp_bitPacking_fu_655_outStream_V_V_din),
    .outStream_V_V_full_n(outStream_V_V_full_n),
    .outStream_V_V_write(grp_bitPacking_fu_655_outStream_V_V_write),
    .inStream_V_V_dout(grp_bitPacking_fu_655_inStream_V_V_dout),
    .inStream_V_V_empty_n(grp_bitPacking_fu_655_inStream_V_V_empty_n),
    .inStream_V_V_read(grp_bitPacking_fu_655_inStream_V_V_read),
    .inStreamSize_V_dout(grp_bitPacking_fu_655_inStreamSize_V_dout),
    .inStreamSize_V_empty_n(grp_bitPacking_fu_655_inStreamSize_V_empty_n),
    .inStreamSize_V_read(grp_bitPacking_fu_655_inStreamSize_V_read),
    .prevSize(grp_bitPacking_fu_655_prevSize),
    .bufferOut_V_read(grp_bitPacking_fu_655_bufferOut_V_read),
    .bitIdx_read(grp_bitPacking_fu_655_bitIdx_read),
    .ap_return_0(grp_bitPacking_fu_655_ap_return_0),
    .ap_return_1(grp_bitPacking_fu_655_ap_return_1),
    .ap_return_2(grp_bitPacking_fu_655_ap_return_2),
    .ap_ext_blocking_n(grp_bitPacking_fu_655_ap_ext_blocking_n),
    .ap_str_blocking_n(grp_bitPacking_fu_655_ap_str_blocking_n),
    .ap_int_blocking_n(grp_bitPacking_fu_655_ap_int_blocking_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd1)) | ((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state26) & (tmp_74_fu_1209_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bitPacking_fu_655_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
            grp_bitPacking_fu_655_ap_start_reg <= 1'b1;
        end else if ((grp_bitPacking_fu_655_ap_ready == 1'b1)) begin
            grp_bitPacking_fu_655_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op196_write_state23 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23))) begin
        Lo_assign_reg_470 <= ap_phi_mux_bitIdx_13_i_i_phi_fu_595_p6;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_i_i_fu_730_p2 == 1'd1))) begin
        Lo_assign_reg_470 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op191_write_state21 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21) & (exitcond_i_i_fu_907_p2 == 1'd1) & (icmp1_fu_966_p2 == 1'd0) & (tmp_70_reg_1301 == 1'd0))) begin
        bitIdx_13_i_i_reg_591 <= bitIdx_12_fu_950_p2;
    end else if ((~((ap_predicate_op196_write_state23 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23) & (icmp1_reg_1385 == 1'd1) & (tmp_70_reg_1301 == 1'd0))) begin
        bitIdx_13_i_i_reg_591 <= bitIdx_13_fu_996_p2;
    end else if ((~((ap_predicate_op191_write_state21 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21) & (tmp_70_reg_1301 == 1'd1) & (exitcond_i_i_fu_907_p2 == 1'd1))) begin
        bitIdx_13_i_i_reg_591 <= reg_715;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op97_write_state3 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (tmp_10_i_i_fu_804_p2 == 1'd1) & (icmp_fu_872_p2 == 1'd0) & (tmp_i_i_35_fu_747_p2 == 1'd0))) begin
        bitIdx_3_i_i_reg_541 <= bitIdx_1_fu_856_p2;
    end else if ((~((ap_predicate_op100_write_state4 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_reg_1321 == 1'd1) & (tmp_10_i_i_reg_1305 == 1'd1))) begin
        bitIdx_3_i_i_reg_541 <= bitIdx_2_fu_901_p2;
    end else if ((~((ap_predicate_op97_write_state3 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (tmp_10_i_i_fu_804_p2 == 1'd0) & (tmp_i_i_35_fu_747_p2 == 1'd0))) begin
        bitIdx_3_i_i_reg_541 <= Lo_assign_reg_470;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op97_write_state3 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (tmp_10_i_i_fu_804_p2 == 1'd1) & (icmp_fu_872_p2 == 1'd0) & (tmp_i_i_35_fu_747_p2 == 1'd0))) begin
        bufferOut_V_2_i_i_reg_554 <= p_Result_s_fu_850_p2;
    end else if ((~((ap_predicate_op100_write_state4 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_reg_1321 == 1'd1) & (tmp_10_i_i_reg_1305 == 1'd1))) begin
        bufferOut_V_2_i_i_reg_554 <= bufferOut_V_fu_897_p1;
    end else if ((~((ap_predicate_op97_write_state3 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (tmp_10_i_i_fu_804_p2 == 1'd0) & (tmp_i_i_35_fu_747_p2 == 1'd0))) begin
        bufferOut_V_2_i_i_reg_554 <= p_Val2_s_reg_482;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op191_write_state21 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21) & (exitcond_i_i_fu_907_p2 == 1'd1) & (icmp1_fu_966_p2 == 1'd0) & (tmp_70_reg_1301 == 1'd0))) begin
        bufferOut_V_4_i_i_reg_604 <= p_Result_1_fu_944_p2;
    end else if ((~((ap_predicate_op196_write_state23 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23) & (icmp1_reg_1385 == 1'd1) & (tmp_70_reg_1301 == 1'd0))) begin
        bufferOut_V_4_i_i_reg_604 <= bufferOut_V_13_fu_991_p1;
    end else if ((~((ap_predicate_op191_write_state21 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21) & (tmp_70_reg_1301 == 1'd1) & (exitcond_i_i_fu_907_p2 == 1'd1))) begin
        bufferOut_V_4_i_i_reg_604 <= reg_709;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_predicate_op196_write_state23 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23) & (icmp1_reg_1385 == 1'd1) & (tmp_70_reg_1301 == 1'd0)) | (~((ap_predicate_op191_write_state21 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21) & (exitcond_i_i_fu_907_p2 == 1'd1) & (icmp1_fu_966_p2 == 1'd0) & (tmp_70_reg_1301 == 1'd0)))) begin
        eob_flag_1_i_i_reg_617 <= 1'd1;
    end else if ((~((ap_predicate_op191_write_state21 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21) & (tmp_70_reg_1301 == 1'd1) & (exitcond_i_i_fu_907_p2 == 1'd1))) begin
        eob_flag_1_i_i_reg_617 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op196_write_state23 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23))) begin
        eob_flag_i_i_reg_518 <= ap_phi_mux_eob_flag_1_i_i_phi_fu_623_p6;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_i_i_fu_730_p2 == 1'd1))) begin
        eob_flag_i_i_reg_518 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i1_i_i_reg_580 <= i_3_reg_1363;
    end else if (((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        i1_i_i_reg_580 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd1)) | ((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state26) & (tmp_74_fu_1209_p2 == 1'd0))) begin
        i2_i_i_reg_644 <= i_2_fu_1233_p2;
    end else if (((outStream_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        i2_i_i_reg_644 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_i_i_fu_730_p2 == 1'd0))) begin
        i_i_i_reg_459 <= i_fu_736_p2;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (input_size_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_i_reg_459 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op196_write_state23 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23))) begin
        input_idx_reg_494 <= phitmp_i_i_fu_1003_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_i_i_fu_730_p2 == 1'd1))) begin
        input_idx_reg_494 <= 32'd8192;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op196_write_state23 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23))) begin
        itr_reg_506 <= phitmp1_i_i_fu_1009_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_i_i_fu_730_p2 == 1'd1))) begin
        itr_reg_506 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        overallSize_1_i_i_reg_567 <= overallSize_fu_972_p2;
    end else if (((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        overallSize_1_i_i_reg_567 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op196_write_state23 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23))) begin
        overallSize_i_i_reg_530 <= overallSize_1_i_i_reg_567;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_i_i_fu_730_p2 == 1'd1))) begin
        overallSize_i_i_reg_530 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd1)) | ((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state26) & (tmp_74_fu_1209_p2 == 1'd0))) begin
        p_Val2_3_reg_635 <= bufferOut_V_1_fu_1229_p1;
    end else if (((outStream_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        p_Val2_3_reg_635 <= bufferOut_V_5_i_i_fu_1192_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op97_write_state3 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (tmp_i_i_35_fu_747_p2 == 1'd1))) begin
        bitIdx_reg_1325 <= bitIdx_fu_878_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        extraOutSize_reg_1404 <= extraOutSize_fu_1088_p2;
        tmp_67_reg_1409 <= tmp_67_fu_1156_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op191_write_state21 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21))) begin
        i_3_reg_1363 <= i_3_fu_913_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op191_write_state21 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21) & (exitcond_i_i_fu_907_p2 == 1'd1) & (tmp_70_reg_1301 == 1'd0))) begin
        icmp1_reg_1385 <= icmp1_fu_966_p2;
        p_Result_1_reg_1373 <= p_Result_1_fu_944_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op97_write_state3 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (tmp_10_i_i_fu_804_p2 == 1'd1) & (tmp_i_i_35_fu_747_p2 == 1'd0))) begin
        icmp_reg_1321 <= icmp_fu_872_p2;
        p_Result_s_reg_1309 <= p_Result_s_fu_850_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op196_write_state23 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23))) begin
        p_Val2_s_reg_482 <= ap_phi_mux_bufferOut_V_4_i_i_phi_fu_608_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        reg_699 <= sizeInBits_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        reg_704 <= grp_bitPacking_fu_655_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        reg_709 <= grp_bitPacking_fu_655_ap_return_1;
        reg_715 <= grp_bitPacking_fu_655_ap_return_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        reg_721 <= sizeInBits_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sizeInBits_load_6_reg_1350 <= sizeInBits_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sizeInBits_load_7_reg_1355 <= sizeInBits_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op97_write_state3 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (tmp_i_i_35_fu_747_p2 == 1'd0))) begin
        tmp_10_i_i_reg_1305 <= tmp_10_i_i_fu_804_p2;
        tmp_70_reg_1301 <= tmp_70_fu_766_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_16_i_i_reg_1340 <= grp_bitPacking_fu_655_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        tmp_17_i_i_reg_1345 <= grp_bitPacking_fu_655_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (input_size_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_56_reg_1239 <= tmp_56_fu_726_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((outStream_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        tmp_68_reg_1419[31 : 6] <= tmp_68_fu_1202_p3[31 : 6];
    end
end

always @ (*) begin
    if ((~(((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd1)) | ((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state26) & (tmp_74_fu_1209_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_ext_blocking_0) == 1'b1)) begin
        ap_ext_blocking_sub_n = 1'b0;
    end else begin
        ap_ext_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_int_blocking_0) == 1'b1)) begin
        ap_int_blocking_sub_n = 1'b0;
    end else begin
        ap_int_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp1_reg_1385 == 1'd1) & (tmp_70_reg_1301 == 1'd0))) begin
        ap_phi_mux_bitIdx_13_i_i_phi_fu_595_p6 = bitIdx_13_fu_996_p2;
    end else begin
        ap_phi_mux_bitIdx_13_i_i_phi_fu_595_p6 = bitIdx_13_i_i_reg_591;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp1_reg_1385 == 1'd1) & (tmp_70_reg_1301 == 1'd0))) begin
        ap_phi_mux_bufferOut_V_4_i_i_phi_fu_608_p6 = bufferOut_V_13_fu_991_p1;
    end else begin
        ap_phi_mux_bufferOut_V_4_i_i_phi_fu_608_p6 = bufferOut_V_4_i_i_reg_604;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp1_reg_1385 == 1'd1) & (tmp_70_reg_1301 == 1'd0))) begin
        ap_phi_mux_eob_flag_1_i_i_phi_fu_623_p6 = 1'd1;
    end else begin
        ap_phi_mux_eob_flag_1_i_i_phi_fu_623_p6 = eob_flag_1_i_i_reg_617;
    end
end

always @ (*) begin
    if ((~(((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd1)) | ((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state26) & (tmp_74_fu_1209_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_str_blocking_0) == 1'b1)) begin
        ap_str_blocking_sub_n = 1'b0;
    end else begin
        ap_str_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if ((grp_bitPacking_fu_655_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_0 = 1'b1;
    end else begin
        ap_sub_ext_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_bitPacking_fu_655_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_0 = 1'b1;
    end else begin
        ap_sub_int_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_bitPacking_fu_655_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_0 = 1'b1;
    end else begin
        ap_sub_str_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state6 == ap_CS_fsm)) begin
        ap_wait_0 = 1'b1;
    end else begin
        ap_wait_0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_bitPacking_fu_655_bitIdx_read = reg_715;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_bitPacking_fu_655_bitIdx_read = bitIdx_3_i_i_reg_541;
    end else begin
        grp_bitPacking_fu_655_bitIdx_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_bitPacking_fu_655_bufferOut_V_read = reg_709;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_bitPacking_fu_655_bufferOut_V_read = bufferOut_V_2_i_i_reg_554;
    end else begin
        grp_bitPacking_fu_655_bufferOut_V_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_bitPacking_fu_655_inStreamSize_V_dout = inStreamSizeInBits7_V_dout;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_bitPacking_fu_655_inStreamSize_V_dout = inStreamSizeInBits6_V_dout;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_bitPacking_fu_655_inStreamSize_V_dout = inStreamSizeInBits5_V_dout;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_bitPacking_fu_655_inStreamSize_V_dout = inStreamSizeInBits4_V_dout;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_bitPacking_fu_655_inStreamSize_V_dout = inStreamSizeInBits3_V_dout;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_bitPacking_fu_655_inStreamSize_V_dout = inStreamSizeInBits2_V_dout;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_bitPacking_fu_655_inStreamSize_V_dout = inStreamSizeInBits1_V_dout;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_bitPacking_fu_655_inStreamSize_V_dout = inStreamSizeInBits0_V_dout;
    end else begin
        grp_bitPacking_fu_655_inStreamSize_V_dout = inStreamSizeInBits7_V_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_bitPacking_fu_655_inStreamSize_V_empty_n = inStreamSizeInBits7_V_empty_n;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_bitPacking_fu_655_inStreamSize_V_empty_n = inStreamSizeInBits6_V_empty_n;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_bitPacking_fu_655_inStreamSize_V_empty_n = inStreamSizeInBits5_V_empty_n;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_bitPacking_fu_655_inStreamSize_V_empty_n = inStreamSizeInBits4_V_empty_n;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_bitPacking_fu_655_inStreamSize_V_empty_n = inStreamSizeInBits3_V_empty_n;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_bitPacking_fu_655_inStreamSize_V_empty_n = inStreamSizeInBits2_V_empty_n;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_bitPacking_fu_655_inStreamSize_V_empty_n = inStreamSizeInBits1_V_empty_n;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_bitPacking_fu_655_inStreamSize_V_empty_n = inStreamSizeInBits0_V_empty_n;
    end else begin
        grp_bitPacking_fu_655_inStreamSize_V_empty_n = inStreamSizeInBits7_V_empty_n;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_bitPacking_fu_655_inStream_V_V_dout = inStream7_V_V_dout;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_bitPacking_fu_655_inStream_V_V_dout = inStream6_V_V_dout;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_bitPacking_fu_655_inStream_V_V_dout = inStream5_V_V_dout;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_bitPacking_fu_655_inStream_V_V_dout = inStream4_V_V_dout;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_bitPacking_fu_655_inStream_V_V_dout = inStream3_V_V_dout;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_bitPacking_fu_655_inStream_V_V_dout = inStream2_V_V_dout;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_bitPacking_fu_655_inStream_V_V_dout = inStream1_V_V_dout;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_bitPacking_fu_655_inStream_V_V_dout = inStream0_V_V_dout;
    end else begin
        grp_bitPacking_fu_655_inStream_V_V_dout = inStream7_V_V_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_bitPacking_fu_655_inStream_V_V_empty_n = inStream7_V_V_empty_n;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_bitPacking_fu_655_inStream_V_V_empty_n = inStream6_V_V_empty_n;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_bitPacking_fu_655_inStream_V_V_empty_n = inStream5_V_V_empty_n;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_bitPacking_fu_655_inStream_V_V_empty_n = inStream4_V_V_empty_n;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_bitPacking_fu_655_inStream_V_V_empty_n = inStream3_V_V_empty_n;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_bitPacking_fu_655_inStream_V_V_empty_n = inStream2_V_V_empty_n;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_bitPacking_fu_655_inStream_V_V_empty_n = inStream1_V_V_empty_n;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_bitPacking_fu_655_inStream_V_V_empty_n = inStream0_V_V_empty_n;
    end else begin
        grp_bitPacking_fu_655_inStream_V_V_empty_n = inStream7_V_V_empty_n;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_bitPacking_fu_655_prevSize = sizeInBits_load_7_reg_1355;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_bitPacking_fu_655_prevSize = sizeInBits_load_6_reg_1350;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_bitPacking_fu_655_prevSize = reg_721;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_bitPacking_fu_655_prevSize = reg_699;
    end else begin
        grp_bitPacking_fu_655_prevSize = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        inStream0_V_V_read = grp_bitPacking_fu_655_inStream_V_V_read;
    end else begin
        inStream0_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        inStream1_V_V_read = grp_bitPacking_fu_655_inStream_V_V_read;
    end else begin
        inStream1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        inStream2_V_V_read = grp_bitPacking_fu_655_inStream_V_V_read;
    end else begin
        inStream2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        inStream3_V_V_read = grp_bitPacking_fu_655_inStream_V_V_read;
    end else begin
        inStream3_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        inStream4_V_V_read = grp_bitPacking_fu_655_inStream_V_V_read;
    end else begin
        inStream4_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        inStream5_V_V_read = grp_bitPacking_fu_655_inStream_V_V_read;
    end else begin
        inStream5_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        inStream6_V_V_read = grp_bitPacking_fu_655_inStream_V_V_read;
    end else begin
        inStream6_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        inStream7_V_V_read = grp_bitPacking_fu_655_inStream_V_V_read;
    end else begin
        inStream7_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        inStreamSizeInBits0_V_read = grp_bitPacking_fu_655_inStreamSize_V_read;
    end else begin
        inStreamSizeInBits0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        inStreamSizeInBits1_V_read = grp_bitPacking_fu_655_inStreamSize_V_read;
    end else begin
        inStreamSizeInBits1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        inStreamSizeInBits2_V_read = grp_bitPacking_fu_655_inStreamSize_V_read;
    end else begin
        inStreamSizeInBits2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        inStreamSizeInBits3_V_read = grp_bitPacking_fu_655_inStreamSize_V_read;
    end else begin
        inStreamSizeInBits3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        inStreamSizeInBits4_V_read = grp_bitPacking_fu_655_inStreamSize_V_read;
    end else begin
        inStreamSizeInBits4_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        inStreamSizeInBits5_V_read = grp_bitPacking_fu_655_inStreamSize_V_read;
    end else begin
        inStreamSizeInBits5_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        inStreamSizeInBits6_V_read = grp_bitPacking_fu_655_inStreamSize_V_read;
    end else begin
        inStreamSizeInBits6_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        inStreamSizeInBits7_V_read = grp_bitPacking_fu_655_inStreamSize_V_read;
    end else begin
        inStreamSizeInBits7_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_blk_n = input_size_empty_n;
    end else begin
        input_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (input_size_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_read = 1'b1;
    end else begin
        input_size_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_state26) & (tmp_74_fu_1209_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state26) & (tmp_74_fu_1209_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state23) & (icmp1_reg_1385 == 1'd1) & (tmp_70_reg_1301 == 1'd0)) | ((1'b1 == ap_CS_fsm_state21) & (icmp1_fu_966_p2 == 1'd1) & (exitcond_i_i_fu_907_p2 == 1'd1) & (tmp_70_reg_1301 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_reg_1321 == 1'd1) & (tmp_10_i_i_reg_1305 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_fu_872_p2 == 1'd1) & (tmp_10_i_i_fu_804_p2 == 1'd1) & (tmp_i_i_35_fu_747_p2 == 1'd0)))) begin
        outStream_V_V_blk_n = outStream_V_V_full_n;
    end else begin
        outStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd1)) | ((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state26) & (tmp_74_fu_1209_p2 == 1'd1))) begin
        outStream_V_V_din = 64'd0;
    end else if ((~(((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd1)) | ((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state26) & (tmp_74_fu_1209_p2 == 1'd0))) begin
        outStream_V_V_din = tmp_V_18_fu_1214_p1;
    end else if (((outStream_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        outStream_V_V_din = tmp_V_fu_1198_p1;
    end else if ((~((ap_predicate_op196_write_state23 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (ap_predicate_op196_write_state23 == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        outStream_V_V_din = tmp_V_20_fu_978_p1;
    end else if ((~((ap_predicate_op100_write_state4 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (ap_predicate_op100_write_state4 == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        outStream_V_V_din = tmp_V_19_fu_884_p1;
    end else if (((~((ap_predicate_op191_write_state21 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (ap_predicate_op191_write_state21 == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | (~((ap_predicate_op97_write_state3 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (ap_predicate_op97_write_state3 == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        outStream_V_V_din = 64'd8;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10))) begin
        outStream_V_V_din = grp_bitPacking_fu_655_outStream_V_V_din;
    end else begin
        outStream_V_V_din = grp_bitPacking_fu_655_outStream_V_V_din;
    end
end

always @ (*) begin
    if (((~(((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd1)) | ((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state26) & (tmp_74_fu_1209_p2 == 1'd1)) | (~(((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd1)) | ((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state26) & (tmp_74_fu_1209_p2 == 1'd0)) | ((outStream_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | (~((ap_predicate_op196_write_state23 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (ap_predicate_op196_write_state23 == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | (~((ap_predicate_op191_write_state21 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (ap_predicate_op191_write_state21 == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | (~((ap_predicate_op100_write_state4 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (ap_predicate_op100_write_state4 == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | (~((ap_predicate_op97_write_state3 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (ap_predicate_op97_write_state3 == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        outStream_V_V_write = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10))) begin
        outStream_V_V_write = grp_bitPacking_fu_655_outStream_V_V_write;
    end else begin
        outStream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sizeInBits_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        sizeInBits_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        sizeInBits_address0 = 64'd3;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9))) begin
        sizeInBits_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sizeInBits_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sizeInBits_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sizeInBits_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sizeInBits_address0 = tmp_i_i_fu_742_p1;
    end else begin
        sizeInBits_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        sizeInBits_address1 = tmp_27_i_i_fu_919_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        sizeInBits_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        sizeInBits_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        sizeInBits_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        sizeInBits_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sizeInBits_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        sizeInBits_address1 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10))) begin
        sizeInBits_address1 = 64'd6;
    end else begin
        sizeInBits_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | (~((ap_predicate_op100_write_state4 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        sizeInBits_ce0 = 1'b1;
    end else begin
        sizeInBits_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | (~((ap_predicate_op191_write_state21 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21)))) begin
        sizeInBits_ce1 = 1'b1;
    end else begin
        sizeInBits_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sizeInBits_d0 = grp_bitPacking_fu_655_ap_return_0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sizeInBits_d0 = 32'd1;
    end else begin
        sizeInBits_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16))) begin
        sizeInBits_d1 = grp_bitPacking_fu_655_ap_return_0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        sizeInBits_d1 = tmp_16_i_i_reg_1340;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sizeInBits_d1 = tmp_17_i_i_reg_1345;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state14))) begin
        sizeInBits_d1 = reg_704;
    end else begin
        sizeInBits_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond1_i_i_fu_730_p2 == 1'd0)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        sizeInBits_we0 = 1'b1;
    end else begin
        sizeInBits_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        sizeInBits_we1 = 1'b1;
    end else begin
        sizeInBits_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (input_size_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_i_i_fu_730_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((ap_predicate_op97_write_state3 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (tmp_i_i_35_fu_747_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((ap_predicate_op97_write_state3 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (tmp_i_i_35_fu_747_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((ap_predicate_op100_write_state4 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((grp_bitPacking_fu_655_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if ((~((ap_predicate_op191_write_state21 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21) & (exitcond_i_i_fu_907_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else if ((~((ap_predicate_op191_write_state21 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21) & (exitcond_i_i_fu_907_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state23 : begin
            if ((~((ap_predicate_op196_write_state23 == 1'b1) & (outStream_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((outStream_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if ((~(((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd1)) | ((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state26) & (tmp_74_fu_1209_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd1)) | ((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state26) & (tmp_74_fu_1209_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (input_size_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state21 = ((ap_predicate_op191_write_state21 == 1'b1) & (outStream_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state23 = ((ap_predicate_op196_write_state23 == 1'b1) & (outStream_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state26 = (((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd1)) | ((outStream_V_V_full_n == 1'b0) & (tmp_74_fu_1209_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_state3 = ((ap_predicate_op97_write_state3 == 1'b1) & (outStream_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((ap_predicate_op100_write_state4 == 1'b1) & (outStream_V_V_full_n == 1'b0));
end

assign ap_ext_blocking_n = (ap_ext_blocking_sub_n & 1'b1);

assign ap_int_blocking_cur_n = (outStream_V_V_blk_n & input_size_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_sub_n & ap_int_blocking_cur_n);

always @ (*) begin
    ap_predicate_op100_write_state4 = ((icmp_reg_1321 == 1'd1) & (tmp_10_i_i_reg_1305 == 1'd1));
end

always @ (*) begin
    ap_predicate_op191_write_state21 = ((icmp1_fu_966_p2 == 1'd1) & (exitcond_i_i_fu_907_p2 == 1'd1) & (tmp_70_reg_1301 == 1'd0));
end

always @ (*) begin
    ap_predicate_op196_write_state23 = ((icmp1_reg_1385 == 1'd1) & (tmp_70_reg_1301 == 1'd0));
end

always @ (*) begin
    ap_predicate_op97_write_state3 = ((icmp_fu_872_p2 == 1'd1) & (tmp_10_i_i_fu_804_p2 == 1'd1) & (tmp_i_i_35_fu_747_p2 == 1'd0));
end

assign ap_str_blocking_n = (ap_str_blocking_sub_n & 1'b1);

assign bitIdx_10_fu_1015_p3 = ((eob_flag_i_i_reg_518[0:0] === 1'b1) ? Lo_assign_reg_470 : bitIdx_reg_1325);

assign bitIdx_10_op_op_fu_1102_p2 = (32'd63 + bitIdx_10_fu_1015_p3);

assign bitIdx_12_fu_950_p2 = (32'd7 + reg_715);

assign bitIdx_13_fu_996_p2 = ($signed(32'd4294967239) + $signed(reg_715));

assign bitIdx_1_fu_856_p2 = (32'd3 + Lo_assign_reg_470);

assign bitIdx_2_fu_901_p2 = ($signed(32'd4294967235) + $signed(Lo_assign_reg_470));

assign bitIdx_fu_878_p2 = (32'd7 + Lo_assign_reg_470);

assign bufferOut_V_12_fu_982_p4 = {{p_Result_1_reg_1373[127:64]}};

assign bufferOut_V_13_fu_991_p1 = bufferOut_V_12_fu_982_p4;

assign bufferOut_V_1_fu_1229_p1 = bufferOut_V_s_fu_1219_p4;

assign bufferOut_V_2_fu_888_p4 = {{p_Result_s_reg_1309[127:64]}};

assign bufferOut_V_5_i_i_fu_1192_p2 = (tmp_61_fu_1184_p3 & p_Val2_s_reg_482);

assign bufferOut_V_fu_897_p1 = bufferOut_V_2_fu_888_p4;

assign bufferOut_V_s_fu_1219_p4 = {{p_Val2_3_reg_635[127:64]}};

assign exitcond1_i_i_fu_730_p2 = ((i_i_i_reg_459 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_i_i_fu_907_p2 = ((i1_i_i_reg_580 == 4'd8) ? 1'b1 : 1'b0);

assign extraOutSize_fu_1088_p2 = ($signed(31'd1) + $signed(tmp_13_cast_i_i_fu_1084_p1));

assign grp_bitPacking_fu_655_ap_start = grp_bitPacking_fu_655_ap_start_reg;

assign i_2_fu_1233_p2 = (32'd64 + i2_i_i_reg_644);

assign i_3_fu_913_p2 = (i1_i_i_reg_580 + 4'd1);

assign i_fu_736_p2 = (i_i_i_reg_459 + 4'd1);

assign icmp1_fu_966_p2 = (($signed(tmp_91_fu_956_p4) > $signed(26'd0)) ? 1'b1 : 1'b0);

assign icmp_fu_872_p2 = (($signed(tmp_83_fu_862_p4) > $signed(26'd0)) ? 1'b1 : 1'b0);

assign overallSize_fu_972_p2 = (sizeInBits_q1 + overallSize_1_i_i_reg_567);

assign p_Result_1_fu_944_p2 = (tmp_89_fu_938_p2 & reg_709);

assign p_Result_s_fu_850_p2 = (tmp_81_fu_844_p2 | tmp_79_fu_830_p2);

assign p_lshr_cast_i_i_fu_1052_p1 = tmp_fu_1042_p4;

assign p_lshr_f_cast_i_i_fu_1072_p1 = tmp_s_fu_1062_p4;

assign p_lshr_fu_1122_p4 = {{p_neg_fu_1116_p2[31:6]}};

assign p_neg_fu_1116_p2 = ($signed(32'd4294967233) - $signed(bitIdx_10_fu_1015_p3));

assign p_neg_i_i_fu_1036_p2 = (32'd1 - bitIdx_10_fu_1015_p3);

assign p_neg_t_fu_1132_p2 = (26'd0 - p_lshr_fu_1122_p4);

assign p_neg_t_i_i_fu_1056_p2 = (30'd0 - p_lshr_cast_i_i_fu_1052_p1);

assign phitmp1_i_i_fu_1009_p2 = (itr_reg_506 + 32'd1);

assign phitmp_i_i_fu_1003_p2 = (input_idx_reg_494 + 32'd8192);

assign tmp_10_i_i_fu_804_p2 = ((tmp_3_fu_796_p3 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_12_i_i_fu_1022_p2 = ($signed(32'd4294967295) + $signed(bitIdx_10_fu_1015_p3));

assign tmp_13_cast_i_i_fu_1084_p1 = $signed(tmp_13_i_i_fu_1076_p3);

assign tmp_13_i_i_fu_1076_p3 = ((tmp_62_fu_1028_p3[0:0] === 1'b1) ? p_neg_t_i_i_fu_1056_p2 : p_lshr_f_cast_i_i_fu_1072_p1);

assign tmp_27_i_i_fu_919_p1 = i1_i_i_reg_580;

assign tmp_2_fu_788_p3 = {{1'd0}, {tmp_70_fu_766_p1}};

assign tmp_3_fu_796_p3 = ((tmp_69_fu_758_p3[0:0] === 1'b1) ? tmp_73_fu_782_p2 : tmp_2_fu_788_p3);

assign tmp_56_fu_726_p1 = input_size_dout[31:0];

assign tmp_57_fu_1164_p1 = Lo_assign_reg_470[6:0];

assign tmp_58_fu_1168_p1 = tmp_57_fu_1164_p1;

assign tmp_59_fu_1172_p2 = 128'd127 << tmp_58_fu_1168_p1;

assign tmp_60_fu_1178_p2 = (tmp_59_fu_1172_p2 ^ 128'd340282366920938463463374607431768211455);

assign tmp_61_fu_1184_p3 = ((eob_flag_i_i_reg_518[0:0] === 1'b1) ? 128'd340282366920938463463374607431768211455 : tmp_60_fu_1178_p2);

assign tmp_62_fu_1028_p3 = tmp_12_i_i_fu_1022_p2[32'd31];

assign tmp_63_fu_1094_p3 = bitIdx_10_fu_1015_p3[32'd31];

assign tmp_64_fu_1108_p3 = bitIdx_10_op_op_fu_1102_p2[32'd31];

assign tmp_65_fu_1138_p4 = {{bitIdx_10_op_op_fu_1102_p2[31:6]}};

assign tmp_66_fu_1148_p3 = ((tmp_64_fu_1108_p3[0:0] === 1'b1) ? p_neg_t_fu_1132_p2 : tmp_65_fu_1138_p4);

assign tmp_67_fu_1156_p3 = ((tmp_63_fu_1094_p3[0:0] === 1'b1) ? 26'd0 : tmp_66_fu_1148_p3);

assign tmp_68_fu_1202_p3 = {{tmp_67_reg_1409}, {6'd0}};

assign tmp_69_fu_758_p3 = itr_reg_506[32'd31];

assign tmp_70_fu_766_p1 = itr_reg_506[0:0];

assign tmp_71_fu_770_p1 = itr_reg_506[0:0];

assign tmp_72_fu_774_p3 = {{1'd0}, {tmp_71_fu_770_p1}};

assign tmp_73_fu_782_p2 = (2'd0 - tmp_72_fu_774_p3);

assign tmp_74_fu_1209_p2 = ((i2_i_i_reg_644 == tmp_68_reg_1419) ? 1'b1 : 1'b0);

assign tmp_75_fu_810_p1 = Lo_assign_reg_470[6:0];

assign tmp_76_fu_814_p1 = tmp_75_fu_810_p1;

assign tmp_77_fu_818_p2 = 128'd7 << tmp_76_fu_814_p1;

assign tmp_78_fu_824_p2 = (tmp_77_fu_818_p2 ^ 128'd340282366920938463463374607431768211455);

assign tmp_79_fu_830_p2 = (tmp_78_fu_824_p2 & p_Val2_s_reg_482);

assign tmp_80_fu_836_p3 = ((tmp_8_i_i_fu_753_p2[0:0] === 1'b1) ? 128'd2 : 128'd3);

assign tmp_81_fu_844_p2 = tmp_80_fu_836_p3 << tmp_76_fu_814_p1;

assign tmp_83_fu_862_p4 = {{bitIdx_1_fu_856_p2[31:6]}};

assign tmp_86_fu_924_p1 = reg_715[6:0];

assign tmp_87_fu_928_p1 = tmp_86_fu_924_p1;

assign tmp_88_fu_932_p2 = 128'd127 << tmp_87_fu_928_p1;

assign tmp_89_fu_938_p2 = (tmp_88_fu_932_p2 ^ 128'd340282366920938463463374607431768211455);

assign tmp_8_i_i_fu_753_p2 = ((input_idx_reg_494 < tmp_56_reg_1239) ? 1'b1 : 1'b0);

assign tmp_91_fu_956_p4 = {{bitIdx_12_fu_950_p2[31:6]}};

assign tmp_V_18_fu_1214_p1 = p_Val2_3_reg_635[63:0];

assign tmp_V_19_fu_884_p1 = p_Result_s_reg_1309[63:0];

assign tmp_V_20_fu_978_p1 = p_Result_1_reg_1373[63:0];

assign tmp_V_fu_1198_p1 = $signed(extraOutSize_reg_1404);

assign tmp_fu_1042_p4 = {{p_neg_i_i_fu_1036_p2[31:3]}};

assign tmp_i_i_35_fu_747_p2 = ((overallSize_i_i_reg_530 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_i_i_fu_742_p1 = i_i_i_reg_459;

assign tmp_s_fu_1062_p4 = {{tmp_12_i_i_fu_1022_p2[31:3]}};

always @ (posedge ap_clk) begin
    tmp_68_reg_1419[5:0] <= 6'b000000;
end

endmodule //gZip_cu_merger
