// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gZip_cu_splitter (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        inStream_V_V_dout,
        inStream_V_V_empty_n,
        inStream_V_V_read,
        outStream0_V_V_din,
        outStream0_V_V_full_n,
        outStream0_V_V_write,
        outStream1_V_V_din,
        outStream1_V_V_full_n,
        outStream1_V_V_write,
        outStream2_V_V_din,
        outStream2_V_V_full_n,
        outStream2_V_V_write,
        outStream3_V_V_din,
        outStream3_V_V_full_n,
        outStream3_V_V_write,
        outStream4_V_V_din,
        outStream4_V_V_full_n,
        outStream4_V_V_write,
        outStream5_V_V_din,
        outStream5_V_V_full_n,
        outStream5_V_V_write,
        outStream6_V_V_din,
        outStream6_V_V_full_n,
        outStream6_V_V_write,
        outStream7_V_V_din,
        outStream7_V_V_full_n,
        outStream7_V_V_write,
        input_size_dout,
        input_size_empty_n,
        input_size_read,
        input_size_out_din,
        input_size_out_full_n,
        input_size_out_write,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [255:0] inStream_V_V_dout;
input   inStream_V_V_empty_n;
output   inStream_V_V_read;
output  [255:0] outStream0_V_V_din;
input   outStream0_V_V_full_n;
output   outStream0_V_V_write;
output  [255:0] outStream1_V_V_din;
input   outStream1_V_V_full_n;
output   outStream1_V_V_write;
output  [255:0] outStream2_V_V_din;
input   outStream2_V_V_full_n;
output   outStream2_V_V_write;
output  [255:0] outStream3_V_V_din;
input   outStream3_V_V_full_n;
output   outStream3_V_V_write;
output  [255:0] outStream4_V_V_din;
input   outStream4_V_V_full_n;
output   outStream4_V_V_write;
output  [255:0] outStream5_V_V_din;
input   outStream5_V_V_full_n;
output   outStream5_V_V_write;
output  [255:0] outStream6_V_V_din;
input   outStream6_V_V_full_n;
output   outStream6_V_V_write;
output  [255:0] outStream7_V_V_din;
input   outStream7_V_V_full_n;
output   outStream7_V_V_write;
input  [63:0] input_size_dout;
input   input_size_empty_n;
output   input_size_read;
output  [63:0] input_size_out_din;
input   input_size_out_full_n;
output   input_size_out_write;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg start_write;
reg inStream_V_V_read;
reg[255:0] outStream0_V_V_din;
reg outStream0_V_V_write;
reg[255:0] outStream1_V_V_din;
reg outStream1_V_V_write;
reg[255:0] outStream2_V_V_din;
reg outStream2_V_V_write;
reg[255:0] outStream3_V_V_din;
reg outStream3_V_V_write;
reg[255:0] outStream4_V_V_din;
reg outStream4_V_V_write;
reg[255:0] outStream5_V_V_din;
reg outStream5_V_V_write;
reg[255:0] outStream6_V_V_din;
reg outStream6_V_V_write;
reg[255:0] outStream7_V_V_din;
reg outStream7_V_V_write;
reg input_size_read;
reg input_size_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    inStream_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_state6;
reg    outStream0_V_V_blk_n;
wire    ap_CS_fsm_state3;
reg  signed [3:0] uIdx_i_i_reg_364;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_2_i_i_fu_406_p2;
reg    outStream1_V_V_blk_n;
reg    outStream2_V_V_blk_n;
reg    outStream3_V_V_blk_n;
reg    outStream4_V_V_blk_n;
reg    outStream5_V_V_blk_n;
reg    outStream6_V_V_blk_n;
reg    outStream7_V_V_blk_n;
reg    input_size_blk_n;
reg    input_size_out_blk_n;
reg   [31:0] j_i_i_reg_387;
reg   [63:0] input_size_read_reg_822;
reg    ap_block_state1;
wire   [31:0] tmp_fu_398_p1;
reg   [31:0] tmp_reg_828;
wire  signed [4:0] uIdx_cast5_i_i_fu_411_p1;
reg  signed [4:0] uIdx_cast5_i_i_reg_836;
reg    ap_block_state2;
wire  signed [31:0] i_fu_415_p2;
reg  signed [31:0] i_reg_841;
wire  signed [31:0] val_assign_fu_435_p3;
reg  signed [31:0] val_assign_reg_846;
wire   [31:0] tmp_47_fu_548_p3;
reg   [31:0] tmp_47_reg_861;
reg    ap_block_state3;
wire   [0:0] tmp_48_fu_556_p2;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] j_fu_561_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] tmp_1_fu_814_p3;
reg    ap_block_state6;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg  signed [31:0] i_i_i_reg_376;
wire  signed [255:0] tmp_V_fu_471_p1;
reg    ap_block_pp0_stage0_01001;
wire   [255:0] tmp_V_16_fu_737_p9;
wire  signed [255:0] tmp_V_8_fu_467_p1;
wire  signed [255:0] tmp_V_9_fu_463_p1;
wire  signed [255:0] tmp_V_10_fu_459_p1;
wire  signed [255:0] tmp_V_11_fu_455_p1;
wire  signed [255:0] tmp_V_12_fu_451_p1;
wire  signed [255:0] tmp_V_13_fu_447_p1;
wire  signed [255:0] tmp_V_14_fu_443_p1;
wire  signed [63:0] tmp_i_i_fu_402_p1;
wire  signed [63:0] tmp_3_i_i_fu_421_p1;
wire   [0:0] tmp_4_i_i_fu_425_p2;
wire   [31:0] chunk_size_fu_430_p2;
wire   [31:0] tmp_5_i_i_fu_475_p2;
wire   [31:0] val_assign_op_fu_488_p2;
wire   [31:0] p_neg2_fu_501_p2;
wire   [28:0] p_lshr_fu_506_p4;
wire   [0:0] tmp_43_fu_493_p3;
wire   [28:0] p_neg_t3_fu_516_p2;
wire   [28:0] tmp_44_fu_522_p4;
wire   [0:0] tmp_42_fu_480_p3;
wire   [28:0] tmp_45_fu_532_p3;
wire   [28:0] tmp_46_fu_540_p3;
wire   [31:0] tmp_49_fu_567_p1;
wire   [31:0] p_Result_6_1_i_i_fu_583_p4;
wire   [31:0] p_Result_6_2_i_i_fu_605_p4;
wire   [31:0] p_Result_6_3_i_i_fu_627_p4;
wire   [31:0] p_Result_6_4_i_i_fu_649_p4;
wire   [31:0] p_Result_6_5_i_i_fu_671_p4;
wire   [31:0] p_Result_6_6_i_i_fu_693_p4;
wire   [31:0] p_Result_6_7_i_i_fu_715_p4;
wire   [31:0] p_Result_8_7_i_i_fu_725_p5;
wire   [31:0] p_Result_8_6_i_i_fu_703_p5;
wire   [31:0] p_Result_8_5_i_i_fu_681_p5;
wire   [31:0] p_Result_8_4_i_i_fu_659_p5;
wire   [31:0] p_Result_8_3_i_i_fu_637_p5;
wire   [31:0] p_Result_8_2_i_i_fu_615_p5;
wire   [31:0] p_Result_8_1_i_i_fu_593_p5;
wire   [31:0] p_Result_8_i_i_fu_571_p5;
wire   [4:0] tmp_7_i_i_fu_765_p2;
wire   [2:0] tmp_52_fu_782_p1;
wire   [2:0] tmp_53_fu_786_p2;
wire   [3:0] tmp_54_fu_792_p3;
wire   [2:0] tmp_51_fu_778_p1;
wire   [0:0] tmp_50_fu_770_p3;
wire   [3:0] tmp_55_fu_800_p2;
wire   [3:0] tmp_s_fu_806_p3;
reg   [4:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6))) begin
        i_i_i_reg_376 <= i_reg_841;
    end else if ((~((input_size_out_full_n == 1'b0) | (input_size_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_i_reg_376 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_48_fu_556_p2 == 1'd0))) begin
        j_i_i_reg_387 <= j_fu_561_p2;
    end else if ((~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3))) begin
        j_i_i_reg_387 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6))) begin
        uIdx_i_i_reg_364 <= tmp_1_fu_814_p3;
    end else if ((~((input_size_out_full_n == 1'b0) | (input_size_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        uIdx_i_i_reg_364 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd1))) begin
        i_reg_841 <= i_fu_415_p2;
        uIdx_cast5_i_i_reg_836 <= uIdx_cast5_i_i_fu_411_p1;
        val_assign_reg_846 <= val_assign_fu_435_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((input_size_out_full_n == 1'b0) | (input_size_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_read_reg_822 <= input_size_dout;
        tmp_reg_828 <= tmp_fu_398_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_47_reg_861[31 : 3] <= tmp_47_fu_548_p3[31 : 3];
    end
end

always @ (*) begin
    if ((tmp_48_fu_556_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        inStream_V_V_blk_n = inStream_V_V_empty_n;
    end else begin
        inStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6)))) begin
        inStream_V_V_read = 1'b1;
    end else begin
        inStream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_blk_n = input_size_empty_n;
    end else begin
        input_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_out_blk_n = input_size_out_full_n;
    end else begin
        input_size_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((input_size_out_full_n == 1'b0) | (input_size_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_out_write = 1'b1;
    end else begin
        input_size_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((input_size_out_full_n == 1'b0) | (input_size_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_read = 1'b1;
    end else begin
        input_size_read = 1'b0;
    end
end

always @ (*) begin
    if ((~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd0)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd0)) | ((1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd0)))) begin
        outStream0_V_V_blk_n = outStream0_V_V_full_n;
    end else begin
        outStream0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd0))) begin
        outStream0_V_V_din = tmp_V_16_fu_737_p9;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd0))) begin
        outStream0_V_V_din = inStream_V_V_dout;
    end else if ((~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd0))) begin
        outStream0_V_V_din = tmp_V_fu_471_p1;
    end else if ((~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0))) begin
        outStream0_V_V_din = 256'd0;
    end else begin
        outStream0_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd0)) | (~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | (~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd0)) | (~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd0)))) begin
        outStream0_V_V_write = 1'b1;
    end else begin
        outStream0_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd1)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd1)) | ((1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd1)))) begin
        outStream1_V_V_blk_n = outStream1_V_V_full_n;
    end else begin
        outStream1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd1))) begin
        outStream1_V_V_din = tmp_V_16_fu_737_p9;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd1))) begin
        outStream1_V_V_din = inStream_V_V_dout;
    end else if ((~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd1))) begin
        outStream1_V_V_din = tmp_V_8_fu_467_p1;
    end else if ((~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0))) begin
        outStream1_V_V_din = 256'd0;
    end else begin
        outStream1_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd1)) | (~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | (~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd1)) | (~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd1)))) begin
        outStream1_V_V_write = 1'b1;
    end else begin
        outStream1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd2)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd2)) | ((1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd2)))) begin
        outStream2_V_V_blk_n = outStream2_V_V_full_n;
    end else begin
        outStream2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd2))) begin
        outStream2_V_V_din = tmp_V_16_fu_737_p9;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd2))) begin
        outStream2_V_V_din = inStream_V_V_dout;
    end else if ((~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd2))) begin
        outStream2_V_V_din = tmp_V_9_fu_463_p1;
    end else if ((~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0))) begin
        outStream2_V_V_din = 256'd0;
    end else begin
        outStream2_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd2)) | (~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | (~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd2)) | (~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd2)))) begin
        outStream2_V_V_write = 1'b1;
    end else begin
        outStream2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd3)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd3)) | ((1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd3)))) begin
        outStream3_V_V_blk_n = outStream3_V_V_full_n;
    end else begin
        outStream3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd3))) begin
        outStream3_V_V_din = tmp_V_16_fu_737_p9;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd3))) begin
        outStream3_V_V_din = inStream_V_V_dout;
    end else if ((~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd3))) begin
        outStream3_V_V_din = tmp_V_10_fu_459_p1;
    end else if ((~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0))) begin
        outStream3_V_V_din = 256'd0;
    end else begin
        outStream3_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd3)) | (~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | (~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd3)) | (~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd3)))) begin
        outStream3_V_V_write = 1'b1;
    end else begin
        outStream3_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd4)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd4)) | ((1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd4)))) begin
        outStream4_V_V_blk_n = outStream4_V_V_full_n;
    end else begin
        outStream4_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd4))) begin
        outStream4_V_V_din = tmp_V_16_fu_737_p9;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd4))) begin
        outStream4_V_V_din = inStream_V_V_dout;
    end else if ((~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd4))) begin
        outStream4_V_V_din = tmp_V_11_fu_455_p1;
    end else if ((~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0))) begin
        outStream4_V_V_din = 256'd0;
    end else begin
        outStream4_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd4)) | (~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | (~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd4)) | (~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd4)))) begin
        outStream4_V_V_write = 1'b1;
    end else begin
        outStream4_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd5)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd5)) | ((1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd5)))) begin
        outStream5_V_V_blk_n = outStream5_V_V_full_n;
    end else begin
        outStream5_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd5))) begin
        outStream5_V_V_din = tmp_V_16_fu_737_p9;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd5))) begin
        outStream5_V_V_din = inStream_V_V_dout;
    end else if ((~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd5))) begin
        outStream5_V_V_din = tmp_V_12_fu_451_p1;
    end else if ((~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0))) begin
        outStream5_V_V_din = 256'd0;
    end else begin
        outStream5_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd5)) | (~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | (~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd5)) | (~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd5)))) begin
        outStream5_V_V_write = 1'b1;
    end else begin
        outStream5_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd6)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd6)) | ((1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd6)))) begin
        outStream6_V_V_blk_n = outStream6_V_V_full_n;
    end else begin
        outStream6_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd6))) begin
        outStream6_V_V_din = tmp_V_16_fu_737_p9;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd6))) begin
        outStream6_V_V_din = inStream_V_V_dout;
    end else if ((~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd6))) begin
        outStream6_V_V_din = tmp_V_13_fu_447_p1;
    end else if ((~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0))) begin
        outStream6_V_V_din = 256'd0;
    end else begin
        outStream6_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd6)) | (~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | (~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd6)) | (~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd6)))) begin
        outStream6_V_V_write = 1'b1;
    end else begin
        outStream6_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd7)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd7)) | ((1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd7)))) begin
        outStream7_V_V_blk_n = outStream7_V_V_full_n;
    end else begin
        outStream7_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd7))) begin
        outStream7_V_V_din = tmp_V_16_fu_737_p9;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd7))) begin
        outStream7_V_V_din = inStream_V_V_dout;
    end else if ((~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd7))) begin
        outStream7_V_V_din = tmp_V_14_fu_443_p1;
    end else if ((~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0))) begin
        outStream7_V_V_din = 256'd0;
    end else begin
        outStream7_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (uIdx_i_i_reg_364 == 4'd7)) | (~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | (~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3) & (uIdx_i_i_reg_364 == 4'd7)) | (~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6) & (uIdx_i_i_reg_364 == 4'd7)))) begin
        outStream7_V_V_write = 1'b1;
    end else begin
        outStream7_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((input_size_out_full_n == 1'b0) | (input_size_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state2) & (tmp_2_i_i_fu_406_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~(((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (tmp_48_fu_556_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (tmp_48_fu_556_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0))));
end

always @ (*) begin
    ap_block_state1 = ((input_size_out_full_n == 1'b0) | (input_size_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = (((outStream7_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream6_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream5_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream4_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream3_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream2_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream1_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)) | ((outStream0_V_V_full_n == 1'b0) & (tmp_2_i_i_fu_406_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_state3 = (((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0)));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0)));
end

always @ (*) begin
    ap_block_state6 = ((inStream_V_V_empty_n == 1'b0) | ((outStream7_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd7)) | ((outStream6_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd6)) | ((outStream5_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd5)) | ((outStream4_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd4)) | ((outStream3_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd3)) | ((outStream2_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd2)) | ((outStream1_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd1)) | ((outStream0_V_V_full_n == 1'b0) & (uIdx_i_i_reg_364 == 4'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = (outStream7_V_V_blk_n & outStream6_V_V_blk_n & outStream5_V_V_blk_n & outStream4_V_V_blk_n & outStream3_V_V_blk_n & outStream2_V_V_blk_n & outStream1_V_V_blk_n & outStream0_V_V_blk_n & input_size_out_blk_n & input_size_blk_n & inStream_V_V_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_ready = internal_ap_ready;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign chunk_size_fu_430_p2 = ($signed(tmp_reg_828) - $signed(i_i_i_reg_376));

assign i_fu_415_p2 = ($signed(i_i_i_reg_376) + $signed(32'd1024));

assign input_size_out_din = input_size_dout;

assign j_fu_561_p2 = (j_i_i_reg_387 + 32'd8);

assign p_Result_6_1_i_i_fu_583_p4 = {{inStream_V_V_dout[63:32]}};

assign p_Result_6_2_i_i_fu_605_p4 = {{inStream_V_V_dout[95:64]}};

assign p_Result_6_3_i_i_fu_627_p4 = {{inStream_V_V_dout[127:96]}};

assign p_Result_6_4_i_i_fu_649_p4 = {{inStream_V_V_dout[159:128]}};

assign p_Result_6_5_i_i_fu_671_p4 = {{inStream_V_V_dout[191:160]}};

assign p_Result_6_6_i_i_fu_693_p4 = {{inStream_V_V_dout[223:192]}};

assign p_Result_6_7_i_i_fu_715_p4 = {{inStream_V_V_dout[255:224]}};

assign p_Result_8_1_i_i_fu_593_p5 = {{24'd0}, {p_Result_6_1_i_i_fu_583_p4[7:0]}};

assign p_Result_8_2_i_i_fu_615_p5 = {{24'd0}, {p_Result_6_2_i_i_fu_605_p4[7:0]}};

assign p_Result_8_3_i_i_fu_637_p5 = {{24'd0}, {p_Result_6_3_i_i_fu_627_p4[7:0]}};

assign p_Result_8_4_i_i_fu_659_p5 = {{24'd0}, {p_Result_6_4_i_i_fu_649_p4[7:0]}};

assign p_Result_8_5_i_i_fu_681_p5 = {{24'd0}, {p_Result_6_5_i_i_fu_671_p4[7:0]}};

assign p_Result_8_6_i_i_fu_703_p5 = {{24'd0}, {p_Result_6_6_i_i_fu_693_p4[7:0]}};

assign p_Result_8_7_i_i_fu_725_p5 = {{24'd0}, {p_Result_6_7_i_i_fu_715_p4[7:0]}};

assign p_Result_8_i_i_fu_571_p5 = {{24'd0}, {tmp_49_fu_567_p1[7:0]}};

assign p_lshr_fu_506_p4 = {{p_neg2_fu_501_p2[31:3]}};

assign p_neg2_fu_501_p2 = ($signed(32'd1) - $signed(val_assign_reg_846));

assign p_neg_t3_fu_516_p2 = (29'd0 - p_lshr_fu_506_p4);

assign start_out = real_start;

assign tmp_1_fu_814_p3 = ((tmp_50_fu_770_p3[0:0] === 1'b1) ? tmp_55_fu_800_p2 : tmp_s_fu_806_p3);

assign tmp_2_i_i_fu_406_p2 = (($signed(tmp_i_i_fu_402_p1) < $signed(input_size_read_reg_822)) ? 1'b1 : 1'b0);

assign tmp_3_i_i_fu_421_p1 = i_fu_415_p2;

assign tmp_42_fu_480_p3 = tmp_5_i_i_fu_475_p2[32'd31];

assign tmp_43_fu_493_p3 = val_assign_op_fu_488_p2[32'd31];

assign tmp_44_fu_522_p4 = {{val_assign_op_fu_488_p2[31:3]}};

assign tmp_45_fu_532_p3 = ((tmp_43_fu_493_p3[0:0] === 1'b1) ? p_neg_t3_fu_516_p2 : tmp_44_fu_522_p4);

assign tmp_46_fu_540_p3 = ((tmp_42_fu_480_p3[0:0] === 1'b1) ? 29'd0 : tmp_45_fu_532_p3);

assign tmp_47_fu_548_p3 = {{tmp_46_fu_540_p3}, {3'd0}};

assign tmp_48_fu_556_p2 = ((j_i_i_reg_387 == tmp_47_reg_861) ? 1'b1 : 1'b0);

assign tmp_49_fu_567_p1 = inStream_V_V_dout[31:0];

assign tmp_4_i_i_fu_425_p2 = (($signed(tmp_3_i_i_fu_421_p1) > $signed(input_size_read_reg_822)) ? 1'b1 : 1'b0);

assign tmp_50_fu_770_p3 = tmp_7_i_i_fu_765_p2[32'd4];

assign tmp_51_fu_778_p1 = tmp_7_i_i_fu_765_p2[2:0];

assign tmp_52_fu_782_p1 = uIdx_i_i_reg_364[2:0];

assign tmp_53_fu_786_p2 = (tmp_52_fu_782_p1 ^ 3'd7);

assign tmp_54_fu_792_p3 = {{1'd0}, {tmp_53_fu_786_p2}};

assign tmp_55_fu_800_p2 = (4'd0 - tmp_54_fu_792_p3);

assign tmp_5_i_i_fu_475_p2 = ($signed(val_assign_reg_846) + $signed(32'd4294967288));

assign tmp_7_i_i_fu_765_p2 = ($signed(5'd1) + $signed(uIdx_cast5_i_i_reg_836));

assign tmp_V_10_fu_459_p1 = val_assign_reg_846;

assign tmp_V_11_fu_455_p1 = val_assign_reg_846;

assign tmp_V_12_fu_451_p1 = val_assign_reg_846;

assign tmp_V_13_fu_447_p1 = val_assign_reg_846;

assign tmp_V_14_fu_443_p1 = val_assign_reg_846;

assign tmp_V_16_fu_737_p9 = {{{{{{{{p_Result_8_7_i_i_fu_725_p5}, {p_Result_8_6_i_i_fu_703_p5}}, {p_Result_8_5_i_i_fu_681_p5}}, {p_Result_8_4_i_i_fu_659_p5}}, {p_Result_8_3_i_i_fu_637_p5}}, {p_Result_8_2_i_i_fu_615_p5}}, {p_Result_8_1_i_i_fu_593_p5}}, {p_Result_8_i_i_fu_571_p5}};

assign tmp_V_8_fu_467_p1 = val_assign_reg_846;

assign tmp_V_9_fu_463_p1 = val_assign_reg_846;

assign tmp_V_fu_471_p1 = val_assign_reg_846;

assign tmp_fu_398_p1 = input_size_dout[31:0];

assign tmp_i_i_fu_402_p1 = i_i_i_reg_376;

assign tmp_s_fu_806_p3 = {{1'd0}, {tmp_51_fu_778_p1}};

assign uIdx_cast5_i_i_fu_411_p1 = uIdx_i_i_reg_364;

assign val_assign_fu_435_p3 = ((tmp_4_i_i_fu_425_p2[0:0] === 1'b1) ? chunk_size_fu_430_p2 : 32'd1024);

assign val_assign_op_fu_488_p2 = ($signed(val_assign_reg_846) + $signed(32'd4294967295));

always @ (posedge ap_clk) begin
    tmp_47_reg_861[2:0] <= 3'b000;
end

endmodule //gZip_cu_splitter
