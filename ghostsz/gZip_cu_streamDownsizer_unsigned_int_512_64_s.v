// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gZip_cu_streamDownsizer_unsigned_int_512_64_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        inStream_V_V_dout,
        inStream_V_V_empty_n,
        inStream_V_V_read,
        outStream_V_V_din,
        outStream_V_V_full_n,
        outStream_V_V_write,
        input_size_dout,
        input_size_empty_n,
        input_size_read,
        input_size_out_din,
        input_size_out_full_n,
        input_size_out_write,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [511:0] inStream_V_V_dout;
input   inStream_V_V_empty_n;
output   inStream_V_V_read;
output  [63:0] outStream_V_V_din;
input   outStream_V_V_full_n;
output   outStream_V_V_write;
input  [63:0] input_size_dout;
input   input_size_empty_n;
output   input_size_read;
output  [63:0] input_size_out_din;
input   input_size_out_full_n;
output   input_size_out_write;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg start_write;
reg inStream_V_V_read;
reg outStream_V_V_write;
reg input_size_read;
reg input_size_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    inStream_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_1_i_i_reg_375;
reg    outStream_V_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] exitcond_i_i_reg_361;
reg   [0:0] exitcond_i_i_reg_361_pp0_iter2_reg;
reg    input_size_blk_n;
reg    input_size_out_blk_n;
reg   [29:0] i_i_i_reg_155;
reg   [28:0] tmp_reg_351;
reg    ap_block_state1;
wire   [29:0] tmp_7_i_i_fu_194_p2;
reg   [29:0] tmp_7_i_i_reg_356;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_i_i_fu_200_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_i_i_reg_361_pp0_iter1_reg;
wire   [29:0] i_fu_205_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] idx_fu_211_p1;
reg   [2:0] idx_reg_370;
reg   [2:0] idx_reg_370_pp0_iter1_reg;
wire   [0:0] tmp_1_i_i_fu_215_p2;
wire   [63:0] tmpValue_V_fu_340_p1;
reg   [63:0] tmpValue_V_reg_379;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_01001;
reg   [511:0] p_Val2_s_fu_124;
wire   [31:0] tmp_23_fu_166_p1;
wire   [31:0] tmp_i_i_fu_170_p2;
wire   [29:0] tmp_cast_i_i_fu_191_p1;
wire   [8:0] Lo_assign_fu_229_p3;
wire   [8:0] Hi_assign_fu_236_p2;
wire   [9:0] tmp_26_fu_248_p1;
wire   [9:0] tmp_27_fu_252_p1;
wire   [0:0] tmp_25_fu_242_p2;
wire   [9:0] tmp_29_fu_266_p2;
wire   [9:0] tmp_31_fu_278_p2;
reg   [511:0] tmp_28_fu_256_p4;
wire   [9:0] tmp_30_fu_272_p2;
wire   [9:0] tmp_32_fu_284_p3;
wire   [9:0] tmp_34_fu_300_p3;
wire   [9:0] tmp_35_fu_308_p2;
wire   [511:0] tmp_33_fu_292_p3;
wire   [511:0] tmp_36_fu_314_p1;
wire   [511:0] tmp_37_fu_318_p1;
wire   [511:0] tmp_38_fu_322_p2;
wire   [511:0] tmp_39_fu_328_p2;
wire   [511:0] p_Result_s_fu_334_p2;
wire    ap_CS_fsm_state7;
reg   [3:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_fu_200_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_i_i_reg_155 <= i_fu_205_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_i_i_reg_155 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_i_i_reg_375 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_s_fu_124 <= inStream_V_V_dout;
    end else if ((~((input_size_out_full_n == 1'b0) | (input_size_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_fu_124 <= 512'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_i_i_reg_361 <= exitcond_i_i_fu_200_p2;
        exitcond_i_i_reg_361_pp0_iter1_reg <= exitcond_i_i_reg_361;
        idx_reg_370_pp0_iter1_reg <= idx_reg_370;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_i_i_reg_361_pp0_iter2_reg <= exitcond_i_i_reg_361_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_fu_200_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idx_reg_370 <= idx_fu_211_p1;
        tmp_1_i_i_reg_375 <= tmp_1_i_i_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_reg_361_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmpValue_V_reg_379 <= tmpValue_V_fu_340_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_7_i_i_reg_356 <= tmp_7_i_i_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((input_size_out_full_n == 1'b0) | (input_size_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_reg_351 <= {{tmp_i_i_fu_170_p2[31:3]}};
    end
end

always @ (*) begin
    if ((exitcond_i_i_fu_200_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_i_i_reg_375 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_V_blk_n = inStream_V_V_empty_n;
    end else begin
        inStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_1_i_i_reg_375 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inStream_V_V_read = 1'b1;
    end else begin
        inStream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_blk_n = input_size_empty_n;
    end else begin
        input_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_out_blk_n = input_size_out_full_n;
    end else begin
        input_size_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((input_size_out_full_n == 1'b0) | (input_size_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_out_write = 1'b1;
    end else begin
        input_size_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((input_size_out_full_n == 1'b0) | (input_size_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_read = 1'b1;
    end else begin
        input_size_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_i_reg_361_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_V_V_blk_n = outStream_V_V_full_n;
    end else begin
        outStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_i_reg_361_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        outStream_V_V_write = 1'b1;
    end else begin
        outStream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((input_size_out_full_n == 1'b0) | (input_size_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_i_i_fu_200_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_i_i_fu_200_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_assign_fu_236_p2 = (9'd63 | Lo_assign_fu_229_p3);

assign Lo_assign_fu_229_p3 = {{idx_reg_370_pp0_iter1_reg}, {6'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((exitcond_i_i_reg_361_pp0_iter2_reg == 1'd0) & (outStream_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((tmp_1_i_i_reg_375 == 1'd1) & (inStream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((exitcond_i_i_reg_361_pp0_iter2_reg == 1'd0) & (outStream_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((tmp_1_i_i_reg_375 == 1'd1) & (inStream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((exitcond_i_i_reg_361_pp0_iter2_reg == 1'd0) & (outStream_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((tmp_1_i_i_reg_375 == 1'd1) & (inStream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((input_size_out_full_n == 1'b0) | (input_size_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((tmp_1_i_i_reg_375 == 1'd1) & (inStream_V_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter3 = ((exitcond_i_i_reg_361_pp0_iter2_reg == 1'd0) & (outStream_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = (outStream_V_V_blk_n & input_size_out_blk_n & input_size_blk_n & inStream_V_V_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_ready = internal_ap_ready;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign exitcond_i_i_fu_200_p2 = ((i_i_i_reg_155 == tmp_7_i_i_reg_356) ? 1'b1 : 1'b0);

assign i_fu_205_p2 = (i_i_i_reg_155 + 30'd1);

assign idx_fu_211_p1 = i_i_i_reg_155[2:0];

assign input_size_out_din = input_size_dout;

assign outStream_V_V_din = tmpValue_V_reg_379;

assign p_Result_s_fu_334_p2 = (tmp_39_fu_328_p2 & tmp_38_fu_322_p2);

assign start_out = real_start;

assign tmpValue_V_fu_340_p1 = p_Result_s_fu_334_p2[63:0];

assign tmp_1_i_i_fu_215_p2 = ((idx_fu_211_p1 == 3'd0) ? 1'b1 : 1'b0);

assign tmp_23_fu_166_p1 = input_size_dout[31:0];

assign tmp_25_fu_242_p2 = ((Lo_assign_fu_229_p3 > Hi_assign_fu_236_p2) ? 1'b1 : 1'b0);

assign tmp_26_fu_248_p1 = Lo_assign_fu_229_p3;

assign tmp_27_fu_252_p1 = Hi_assign_fu_236_p2;

integer ap_tvar_int_0;

always @ (p_Val2_s_fu_124) begin
    for (ap_tvar_int_0 = 512 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 511 - 0) begin
            tmp_28_fu_256_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_28_fu_256_p4[ap_tvar_int_0] = p_Val2_s_fu_124[511 - ap_tvar_int_0];
        end
    end
end

assign tmp_29_fu_266_p2 = (tmp_26_fu_248_p1 - tmp_27_fu_252_p1);

assign tmp_30_fu_272_p2 = (tmp_26_fu_248_p1 ^ 10'd511);

assign tmp_31_fu_278_p2 = (tmp_27_fu_252_p1 - tmp_26_fu_248_p1);

assign tmp_32_fu_284_p3 = ((tmp_25_fu_242_p2[0:0] === 1'b1) ? tmp_29_fu_266_p2 : tmp_31_fu_278_p2);

assign tmp_33_fu_292_p3 = ((tmp_25_fu_242_p2[0:0] === 1'b1) ? tmp_28_fu_256_p4 : p_Val2_s_fu_124);

assign tmp_34_fu_300_p3 = ((tmp_25_fu_242_p2[0:0] === 1'b1) ? tmp_30_fu_272_p2 : tmp_26_fu_248_p1);

assign tmp_35_fu_308_p2 = (10'd511 - tmp_32_fu_284_p3);

assign tmp_36_fu_314_p1 = tmp_34_fu_300_p3;

assign tmp_37_fu_318_p1 = tmp_35_fu_308_p2;

assign tmp_38_fu_322_p2 = tmp_33_fu_292_p3 >> tmp_36_fu_314_p1;

assign tmp_39_fu_328_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> tmp_37_fu_318_p1;

assign tmp_7_i_i_fu_194_p2 = (30'd1 + tmp_cast_i_i_fu_191_p1);

assign tmp_cast_i_i_fu_191_p1 = tmp_reg_351;

assign tmp_i_i_fu_170_p2 = ($signed(32'd4294967295) + $signed(tmp_23_fu_166_p1));

endmodule //gZip_cu_streamDownsizer_unsigned_int_512_64_s
