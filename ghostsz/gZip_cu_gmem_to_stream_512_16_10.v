// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gZip_cu_gmem_to_stream_512_16_10 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        m_axi_in_V_AWVALID,
        m_axi_in_V_AWREADY,
        m_axi_in_V_AWADDR,
        m_axi_in_V_AWID,
        m_axi_in_V_AWLEN,
        m_axi_in_V_AWSIZE,
        m_axi_in_V_AWBURST,
        m_axi_in_V_AWLOCK,
        m_axi_in_V_AWCACHE,
        m_axi_in_V_AWPROT,
        m_axi_in_V_AWQOS,
        m_axi_in_V_AWREGION,
        m_axi_in_V_AWUSER,
        m_axi_in_V_WVALID,
        m_axi_in_V_WREADY,
        m_axi_in_V_WDATA,
        m_axi_in_V_WSTRB,
        m_axi_in_V_WLAST,
        m_axi_in_V_WID,
        m_axi_in_V_WUSER,
        m_axi_in_V_ARVALID,
        m_axi_in_V_ARREADY,
        m_axi_in_V_ARADDR,
        m_axi_in_V_ARID,
        m_axi_in_V_ARLEN,
        m_axi_in_V_ARSIZE,
        m_axi_in_V_ARBURST,
        m_axi_in_V_ARLOCK,
        m_axi_in_V_ARCACHE,
        m_axi_in_V_ARPROT,
        m_axi_in_V_ARQOS,
        m_axi_in_V_ARREGION,
        m_axi_in_V_ARUSER,
        m_axi_in_V_RVALID,
        m_axi_in_V_RREADY,
        m_axi_in_V_RDATA,
        m_axi_in_V_RLAST,
        m_axi_in_V_RID,
        m_axi_in_V_RUSER,
        m_axi_in_V_RRESP,
        m_axi_in_V_BVALID,
        m_axi_in_V_BREADY,
        m_axi_in_V_BRESP,
        m_axi_in_V_BID,
        m_axi_in_V_BUSER,
        in_V_offset,
        inStream512_V_V_din,
        inStream512_V_V_full_n,
        inStream512_V_V_write,
        input_size,
        input_size_c_din,
        input_size_c_full_n,
        input_size_c_write,
        out_V_offset,
        encoded_size_offset,
        out_V_offset_out_din,
        out_V_offset_out_full_n,
        out_V_offset_out_write,
        encoded_size_offset_out_din,
        encoded_size_offset_out_full_n,
        encoded_size_offset_out_write,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_pp0_stage0 = 13'd512;
parameter    ap_ST_fsm_state13 = 13'd1024;
parameter    ap_ST_fsm_pp1_stage0 = 13'd2048;
parameter    ap_ST_fsm_state16 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output   m_axi_in_V_AWVALID;
input   m_axi_in_V_AWREADY;
output  [63:0] m_axi_in_V_AWADDR;
output  [0:0] m_axi_in_V_AWID;
output  [31:0] m_axi_in_V_AWLEN;
output  [2:0] m_axi_in_V_AWSIZE;
output  [1:0] m_axi_in_V_AWBURST;
output  [1:0] m_axi_in_V_AWLOCK;
output  [3:0] m_axi_in_V_AWCACHE;
output  [2:0] m_axi_in_V_AWPROT;
output  [3:0] m_axi_in_V_AWQOS;
output  [3:0] m_axi_in_V_AWREGION;
output  [0:0] m_axi_in_V_AWUSER;
output   m_axi_in_V_WVALID;
input   m_axi_in_V_WREADY;
output  [511:0] m_axi_in_V_WDATA;
output  [63:0] m_axi_in_V_WSTRB;
output   m_axi_in_V_WLAST;
output  [0:0] m_axi_in_V_WID;
output  [0:0] m_axi_in_V_WUSER;
output   m_axi_in_V_ARVALID;
input   m_axi_in_V_ARREADY;
output  [63:0] m_axi_in_V_ARADDR;
output  [0:0] m_axi_in_V_ARID;
output  [31:0] m_axi_in_V_ARLEN;
output  [2:0] m_axi_in_V_ARSIZE;
output  [1:0] m_axi_in_V_ARBURST;
output  [1:0] m_axi_in_V_ARLOCK;
output  [3:0] m_axi_in_V_ARCACHE;
output  [2:0] m_axi_in_V_ARPROT;
output  [3:0] m_axi_in_V_ARQOS;
output  [3:0] m_axi_in_V_ARREGION;
output  [0:0] m_axi_in_V_ARUSER;
input   m_axi_in_V_RVALID;
output   m_axi_in_V_RREADY;
input  [511:0] m_axi_in_V_RDATA;
input   m_axi_in_V_RLAST;
input  [0:0] m_axi_in_V_RID;
input  [0:0] m_axi_in_V_RUSER;
input  [1:0] m_axi_in_V_RRESP;
input   m_axi_in_V_BVALID;
output   m_axi_in_V_BREADY;
input  [1:0] m_axi_in_V_BRESP;
input  [0:0] m_axi_in_V_BID;
input  [0:0] m_axi_in_V_BUSER;
input  [57:0] in_V_offset;
output  [511:0] inStream512_V_V_din;
input   inStream512_V_V_full_n;
output   inStream512_V_V_write;
input  [63:0] input_size;
output  [63:0] input_size_c_din;
input   input_size_c_full_n;
output   input_size_c_write;
input  [57:0] out_V_offset;
input  [61:0] encoded_size_offset;
output  [57:0] out_V_offset_out_din;
input   out_V_offset_out_full_n;
output   out_V_offset_out_write;
output  [61:0] encoded_size_offset_out_din;
input   encoded_size_offset_out_full_n;
output   encoded_size_offset_out_write;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg start_write;
reg m_axi_in_V_ARVALID;
reg m_axi_in_V_RREADY;
reg inStream512_V_V_write;
reg input_size_c_write;
reg out_V_offset_out_write;
reg encoded_size_offset_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    in_V_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    in_V_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond1_i_i_i_i_i_reg_429;
reg    inStream512_V_V_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_i_i_i_i_i_reg_443;
reg    input_size_c_blk_n;
reg    out_V_offset_out_blk_n;
reg    encoded_size_offset_out_blk_n;
reg   [31:0] j_i_i_i_i_i_reg_233;
reg   [31:0] j_i_i_i_i_i_reg_233_pp0_iter1_reg;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] j1_i_i_i_i_i_reg_245;
reg    ap_block_state1;
wire   [26:0] sizeInWord_fu_280_p2;
reg   [26:0] sizeInWord_reg_387;
wire   [27:0] sizeInWord_cast_i_i_i_i_i_fu_286_p1;
reg   [27:0] sizeInWord_cast_i_i_i_i_i_reg_393;
wire   [26:0] i_fu_299_p2;
reg   [26:0] i_reg_401;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_52_i_i_i_i_i_fu_290_p2;
wire   [27:0] p_i_i_i_i_i_fu_315_p3;
reg   [27:0] p_i_i_i_i_i_reg_406;
wire   [58:0] sum_i_i_i_fu_330_p2;
reg   [58:0] sum_i_i_i_reg_411;
wire  signed [31:0] p_cast_i_i_i_i_i_fu_336_p1;
reg  signed [31:0] p_cast_i_i_i_i_i_reg_416;
reg    ap_sig_ioackin_m_axi_in_V_ARREADY;
wire   [0:0] exitcond1_i_i_i_i_i_fu_350_p2;
reg   [0:0] exitcond1_i_i_i_i_i_reg_429_pp0_iter1_reg;
wire   [31:0] j_fu_355_p2;
reg   [31:0] j_reg_433;
reg    ap_enable_reg_pp0_iter0;
reg   [511:0] in_V_addr_read_reg_438;
wire   [0:0] exitcond_i_i_i_i_i_fu_366_p2;
wire    ap_block_state14_pp1_stage0_iter0;
reg    ap_block_state15_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [31:0] j_1_fu_371_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_CS_fsm_state9;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state13;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state14;
reg   [3:0] buffer_V_address0;
reg    buffer_V_ce0;
reg    buffer_V_we0;
wire   [511:0] buffer_V_q0;
reg   [26:0] i_i_i_i_i_i_reg_222;
wire    ap_CS_fsm_state16;
reg   [31:0] ap_phi_mux_j_i_i_i_i_i_phi_fu_237_p4;
wire   [63:0] tmp_54_i_i_i_i_i_fu_361_p1;
wire   [63:0] tmp_57_i_i_i_i_i_fu_377_p1;
wire   [63:0] sum_cast_i_i_i_fu_340_p1;
reg    ap_reg_ioackin_m_axi_in_V_ARREADY;
reg    ap_block_pp1_stage0_01001;
wire   [31:0] tmp_fu_256_p1;
wire   [31:0] tmp_i_i_i_i_i_fu_260_p2;
wire   [25:0] tmp_i_i_i_fu_266_p4;
wire   [26:0] tmp_cast_i_i_i_i_i_fu_276_p1;
wire   [27:0] i_cast_i_i_i_i_i_fu_295_p1;
wire   [0:0] tmp_53_i_i_i_i_i_fu_305_p2;
wire   [27:0] chunk_size_fu_310_p2;
wire   [58:0] in_V_offset_cast18_i_i_i_fu_327_p1;
wire   [58:0] tmp_cast_i_i_i_fu_323_p1;
reg   [12:0] ap_NS_fsm;
wire    ap_ext_blocking_cur_n;
wire    ap_int_blocking_cur_n;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_reg_ioackin_m_axi_in_V_ARREADY = 1'b0;
end

gZip_cu_gmem_to_stream_512_16_10_buffer_V #(
    .DataWidth( 512 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_V_address0),
    .ce0(buffer_V_ce0),
    .we0(buffer_V_we0),
    .d0(in_V_addr_read_reg_438),
    .q0(buffer_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_52_i_i_i_i_i_fu_290_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state10)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state14) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state14))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state14);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_in_V_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            if ((ap_sig_ioackin_m_axi_in_V_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_in_V_ARREADY <= 1'b0;
            end else if ((m_axi_in_V_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_in_V_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_i_i_i_i_i_reg_222 <= i_reg_401;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (encoded_size_offset_out_full_n == 1'b0) | (out_V_offset_out_full_n == 1'b0) | (input_size_c_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_i_i_i_i_reg_222 <= 27'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j1_i_i_i_i_i_reg_245 <= 32'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_i_i_i_i_i_fu_366_p2 == 1'd0))) begin
        j1_i_i_i_i_i_reg_245 <= j_1_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_i_i_i_i_i_reg_429 == 1'd0))) begin
        j_i_i_i_i_i_reg_233 <= j_reg_433;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_i_i_i_i_i_reg_233 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond1_i_i_i_i_i_reg_429 <= exitcond1_i_i_i_i_i_fu_350_p2;
        exitcond1_i_i_i_i_i_reg_429_pp0_iter1_reg <= exitcond1_i_i_i_i_i_reg_429;
        j_i_i_i_i_i_reg_233_pp0_iter1_reg <= j_i_i_i_i_i_reg_233;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_i_i_i_i_i_reg_443 <= exitcond_i_i_i_i_i_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_52_i_i_i_i_i_fu_290_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_401 <= i_fu_299_p2;
        p_i_i_i_i_i_reg_406 <= p_i_i_i_i_i_fu_315_p3;
        sum_i_i_i_reg_411 <= sum_i_i_i_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_i_i_i_i_i_reg_429 == 1'd0))) begin
        in_V_addr_read_reg_438 <= m_axi_in_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_433 <= j_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_m_axi_in_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_cast_i_i_i_i_i_reg_416 <= p_cast_i_i_i_i_i_fu_336_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (encoded_size_offset_out_full_n == 1'b0) | (out_V_offset_out_full_n == 1'b0) | (input_size_c_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        sizeInWord_cast_i_i_i_i_i_reg_393[26 : 0] <= sizeInWord_cast_i_i_i_i_i_fu_286_p1[26 : 0];
        sizeInWord_reg_387 <= sizeInWord_fu_280_p2;
    end
end

always @ (*) begin
    if ((exitcond1_i_i_i_i_i_fu_350_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_i_i_i_i_i_fu_366_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_52_i_i_i_i_i_fu_290_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond1_i_i_i_i_i_reg_429 == 1'd0))) begin
        ap_phi_mux_j_i_i_i_i_i_phi_fu_237_p4 = j_reg_433;
    end else begin
        ap_phi_mux_j_i_i_i_i_i_phi_fu_237_p4 = j_i_i_i_i_i_reg_233;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_in_V_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_in_V_ARREADY = m_axi_in_V_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_in_V_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        buffer_V_address0 = tmp_57_i_i_i_i_i_fu_377_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        buffer_V_address0 = tmp_54_i_i_i_i_i_fu_361_p1;
    end else begin
        buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        buffer_V_ce0 = 1'b1;
    end else begin
        buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_i_i_i_i_i_reg_429_pp0_iter1_reg == 1'd0))) begin
        buffer_V_we0 = 1'b1;
    end else begin
        buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        encoded_size_offset_out_blk_n = encoded_size_offset_out_full_n;
    end else begin
        encoded_size_offset_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (encoded_size_offset_out_full_n == 1'b0) | (out_V_offset_out_full_n == 1'b0) | (input_size_c_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        encoded_size_offset_out_write = 1'b1;
    end else begin
        encoded_size_offset_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (exitcond_i_i_i_i_i_reg_443 == 1'd0))) begin
        inStream512_V_V_blk_n = inStream512_V_V_full_n;
    end else begin
        inStream512_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_i_i_i_i_i_reg_443 == 1'd0))) begin
        inStream512_V_V_write = 1'b1;
    end else begin
        inStream512_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_V_blk_n_AR = m_axi_in_V_ARREADY;
    end else begin
        in_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond1_i_i_i_i_i_reg_429 == 1'd0))) begin
        in_V_blk_n_R = m_axi_in_V_RVALID;
    end else begin
        in_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_c_blk_n = input_size_c_full_n;
    end else begin
        input_size_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (encoded_size_offset_out_full_n == 1'b0) | (out_V_offset_out_full_n == 1'b0) | (input_size_c_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_c_write = 1'b1;
    end else begin
        input_size_c_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_52_i_i_i_i_i_fu_290_p2 == 1'd0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_in_V_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_in_V_ARVALID = 1'b1;
    end else begin
        m_axi_in_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_i_i_i_i_i_reg_429 == 1'd0))) begin
        m_axi_in_V_RREADY = 1'b1;
    end else begin
        m_axi_in_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_V_offset_out_blk_n = out_V_offset_out_full_n;
    end else begin
        out_V_offset_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (encoded_size_offset_out_full_n == 1'b0) | (out_V_offset_out_full_n == 1'b0) | (input_size_c_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_V_offset_out_write = 1'b1;
    end else begin
        out_V_offset_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (encoded_size_offset_out_full_n == 1'b0) | (out_V_offset_out_full_n == 1'b0) | (input_size_c_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_52_i_i_i_i_i_fu_290_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ap_sig_ioackin_m_axi_in_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond1_i_i_i_i_i_fu_350_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond1_i_i_i_i_i_fu_350_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_i_i_i_i_i_fu_366_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_i_i_i_i_i_fu_366_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_in_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond1_i_i_i_i_i_reg_429 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_in_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond1_i_i_i_i_i_reg_429 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((inStream512_V_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond_i_i_i_i_i_reg_443 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((inStream512_V_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond_i_i_i_i_i_reg_443 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((inStream512_V_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond_i_i_i_i_i_reg_443 == 1'd0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0) | (encoded_size_offset_out_full_n == 1'b0) | (out_V_offset_out_full_n == 1'b0) | (input_size_c_full_n == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = ((m_axi_in_V_RVALID == 1'b0) & (exitcond1_i_i_i_i_i_reg_429 == 1'd0));
end

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_pp1_stage0_iter1 = ((inStream512_V_V_full_n == 1'b0) & (exitcond_i_i_i_i_i_reg_443 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ext_blocking_cur_n = (in_V_blk_n_R & in_V_blk_n_AR);

assign ap_ext_blocking_n = (ap_ext_blocking_cur_n & 1'b1);

assign ap_int_blocking_cur_n = (out_V_offset_out_blk_n & input_size_c_blk_n & inStream512_V_V_blk_n & encoded_size_offset_out_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_ready = internal_ap_ready;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign chunk_size_fu_310_p2 = (sizeInWord_cast_i_i_i_i_i_reg_393 - i_cast_i_i_i_i_i_fu_295_p1);

assign encoded_size_offset_out_din = encoded_size_offset;

assign exitcond1_i_i_i_i_i_fu_350_p2 = ((ap_phi_mux_j_i_i_i_i_i_phi_fu_237_p4 == p_cast_i_i_i_i_i_reg_416) ? 1'b1 : 1'b0);

assign exitcond_i_i_i_i_i_fu_366_p2 = ((j1_i_i_i_i_i_reg_245 == p_cast_i_i_i_i_i_reg_416) ? 1'b1 : 1'b0);

assign i_cast_i_i_i_i_i_fu_295_p1 = i_i_i_i_i_i_reg_222;

assign i_fu_299_p2 = (i_i_i_i_i_i_reg_222 + 27'd16);

assign inStream512_V_V_din = buffer_V_q0;

assign in_V_offset_cast18_i_i_i_fu_327_p1 = in_V_offset;

assign input_size_c_din = input_size;

assign j_1_fu_371_p2 = (j1_i_i_i_i_i_reg_245 + 32'd1);

assign j_fu_355_p2 = (ap_phi_mux_j_i_i_i_i_i_phi_fu_237_p4 + 32'd1);

assign m_axi_in_V_ARADDR = sum_cast_i_i_i_fu_340_p1;

assign m_axi_in_V_ARBURST = 2'd0;

assign m_axi_in_V_ARCACHE = 4'd0;

assign m_axi_in_V_ARID = 1'd0;

assign m_axi_in_V_ARLEN = $signed(p_i_i_i_i_i_reg_406);

assign m_axi_in_V_ARLOCK = 2'd0;

assign m_axi_in_V_ARPROT = 3'd0;

assign m_axi_in_V_ARQOS = 4'd0;

assign m_axi_in_V_ARREGION = 4'd0;

assign m_axi_in_V_ARSIZE = 3'd0;

assign m_axi_in_V_ARUSER = 1'd0;

assign m_axi_in_V_AWADDR = 64'd0;

assign m_axi_in_V_AWBURST = 2'd0;

assign m_axi_in_V_AWCACHE = 4'd0;

assign m_axi_in_V_AWID = 1'd0;

assign m_axi_in_V_AWLEN = 32'd0;

assign m_axi_in_V_AWLOCK = 2'd0;

assign m_axi_in_V_AWPROT = 3'd0;

assign m_axi_in_V_AWQOS = 4'd0;

assign m_axi_in_V_AWREGION = 4'd0;

assign m_axi_in_V_AWSIZE = 3'd0;

assign m_axi_in_V_AWUSER = 1'd0;

assign m_axi_in_V_AWVALID = 1'b0;

assign m_axi_in_V_BREADY = 1'b0;

assign m_axi_in_V_WDATA = 512'd0;

assign m_axi_in_V_WID = 1'd0;

assign m_axi_in_V_WLAST = 1'b0;

assign m_axi_in_V_WSTRB = 64'd0;

assign m_axi_in_V_WUSER = 1'd0;

assign m_axi_in_V_WVALID = 1'b0;

assign out_V_offset_out_din = out_V_offset;

assign p_cast_i_i_i_i_i_fu_336_p1 = $signed(p_i_i_i_i_i_reg_406);

assign p_i_i_i_i_i_fu_315_p3 = ((tmp_53_i_i_i_i_i_fu_305_p2[0:0] === 1'b1) ? chunk_size_fu_310_p2 : 28'd16);

assign sizeInWord_cast_i_i_i_i_i_fu_286_p1 = sizeInWord_fu_280_p2;

assign sizeInWord_fu_280_p2 = (27'd1 + tmp_cast_i_i_i_i_i_fu_276_p1);

assign start_out = real_start;

assign sum_cast_i_i_i_fu_340_p1 = sum_i_i_i_reg_411;

assign sum_i_i_i_fu_330_p2 = (in_V_offset_cast18_i_i_i_fu_327_p1 + tmp_cast_i_i_i_fu_323_p1);

assign tmp_52_i_i_i_i_i_fu_290_p2 = ((i_i_i_i_i_i_reg_222 < sizeInWord_reg_387) ? 1'b1 : 1'b0);

assign tmp_53_i_i_i_i_i_fu_305_p2 = ((i_fu_299_p2 > sizeInWord_reg_387) ? 1'b1 : 1'b0);

assign tmp_54_i_i_i_i_i_fu_361_p1 = j_i_i_i_i_i_reg_233_pp0_iter1_reg;

assign tmp_57_i_i_i_i_i_fu_377_p1 = j1_i_i_i_i_i_reg_245;

assign tmp_cast_i_i_i_fu_323_p1 = i_i_i_i_i_i_reg_222;

assign tmp_cast_i_i_i_i_i_fu_276_p1 = tmp_i_i_i_fu_266_p4;

assign tmp_fu_256_p1 = input_size[31:0];

assign tmp_i_i_i_fu_266_p4 = {{tmp_i_i_i_i_i_fu_260_p2[31:6]}};

assign tmp_i_i_i_i_i_fu_260_p2 = ($signed(32'd4294967295) + $signed(tmp_fu_256_p1));

always @ (posedge ap_clk) begin
    sizeInWord_cast_i_i_i_i_i_reg_393[27] <= 1'b0;
end

endmodule //gZip_cu_gmem_to_stream_512_16_10
